
quad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c6c  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002e34  08002e34  00003e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e58  08002e58  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002e58  08002e58  00003e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e60  08002e60  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e60  08002e60  00003e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e64  08002e64  00003e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002e68  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08002e74  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08002e74  00004078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007556  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000187f  00000000  00000000  0000b592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000708  00000000  00000000  0000ce18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000052b  00000000  00000000  0000d520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025180  00000000  00000000  0000da4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000092d7  00000000  00000000  00032bcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3592  00000000  00000000  0003bea2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011f434  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ac4  00000000  00000000  0011f478  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000034  00000000  00000000  00120f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08002e1c 	.word	0x08002e1c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08002e1c 	.word	0x08002e1c

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b090      	sub	sp, #64	@ 0x40
 80004fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	605a      	str	r2, [r3, #4]
 8000508:	609a      	str	r2, [r3, #8]
 800050a:	60da      	str	r2, [r3, #12]
 800050c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800050e:	4bad      	ldr	r3, [pc, #692]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000512:	4aac      	ldr	r2, [pc, #688]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 8000514:	f043 0310 	orr.w	r3, r3, #16
 8000518:	6313      	str	r3, [r2, #48]	@ 0x30
 800051a:	4baa      	ldr	r3, [pc, #680]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051e:	f003 0310 	and.w	r3, r3, #16
 8000522:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000526:	4ba7      	ldr	r3, [pc, #668]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052a:	4aa6      	ldr	r2, [pc, #664]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 800052c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000530:	6313      	str	r3, [r2, #48]	@ 0x30
 8000532:	4ba4      	ldr	r3, [pc, #656]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800053a:	627b      	str	r3, [r7, #36]	@ 0x24
 800053c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053e:	4ba1      	ldr	r3, [pc, #644]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000542:	4aa0      	ldr	r2, [pc, #640]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 8000544:	f043 0302 	orr.w	r3, r3, #2
 8000548:	6313      	str	r3, [r2, #48]	@ 0x30
 800054a:	4b9e      	ldr	r3, [pc, #632]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054e:	f003 0302 	and.w	r3, r3, #2
 8000552:	623b      	str	r3, [r7, #32]
 8000554:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000556:	4b9b      	ldr	r3, [pc, #620]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055a:	4a9a      	ldr	r2, [pc, #616]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 800055c:	f043 0308 	orr.w	r3, r3, #8
 8000560:	6313      	str	r3, [r2, #48]	@ 0x30
 8000562:	4b98      	ldr	r3, [pc, #608]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000566:	f003 0308 	and.w	r3, r3, #8
 800056a:	61fb      	str	r3, [r7, #28]
 800056c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800056e:	4b95      	ldr	r3, [pc, #596]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000572:	4a94      	ldr	r2, [pc, #592]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 8000574:	f043 0304 	orr.w	r3, r3, #4
 8000578:	6313      	str	r3, [r2, #48]	@ 0x30
 800057a:	4b92      	ldr	r3, [pc, #584]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057e:	f003 0304 	and.w	r3, r3, #4
 8000582:	61bb      	str	r3, [r7, #24]
 8000584:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000586:	4b8f      	ldr	r3, [pc, #572]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058a:	4a8e      	ldr	r2, [pc, #568]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 800058c:	f043 0301 	orr.w	r3, r3, #1
 8000590:	6313      	str	r3, [r2, #48]	@ 0x30
 8000592:	4b8c      	ldr	r3, [pc, #560]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000596:	f003 0301 	and.w	r3, r3, #1
 800059a:	617b      	str	r3, [r7, #20]
 800059c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800059e:	4b89      	ldr	r3, [pc, #548]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a2:	4a88      	ldr	r2, [pc, #544]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 80005a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005aa:	4b86      	ldr	r3, [pc, #536]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80005b2:	613b      	str	r3, [r7, #16]
 80005b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80005b6:	4b83      	ldr	r3, [pc, #524]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	4a82      	ldr	r2, [pc, #520]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 80005bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005c2:	4b80      	ldr	r3, [pc, #512]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80005ce:	4b7d      	ldr	r3, [pc, #500]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d2:	4a7c      	ldr	r2, [pc, #496]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 80005d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80005d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005da:	4b7a      	ldr	r3, [pc, #488]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005e6:	4b77      	ldr	r3, [pc, #476]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	4a76      	ldr	r2, [pc, #472]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 80005ec:	f043 0320 	orr.w	r3, r3, #32
 80005f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f2:	4b74      	ldr	r3, [pc, #464]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	f003 0320 	and.w	r3, r3, #32
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005fe:	4b71      	ldr	r3, [pc, #452]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	4a70      	ldr	r2, [pc, #448]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 8000604:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000608:	6313      	str	r3, [r2, #48]	@ 0x30
 800060a:	4b6e      	ldr	r3, [pc, #440]	@ (80007c4 <MX_GPIO_Init+0x2cc>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000616:	2201      	movs	r2, #1
 8000618:	2120      	movs	r1, #32
 800061a:	486b      	ldr	r0, [pc, #428]	@ (80007c8 <MX_GPIO_Init+0x2d0>)
 800061c:	f001 faba 	bl	8001b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	f241 010c 	movw	r1, #4108	@ 0x100c
 8000626:	4869      	ldr	r0, [pc, #420]	@ (80007cc <MX_GPIO_Init+0x2d4>)
 8000628:	f001 fab4 	bl	8001b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	2108      	movs	r1, #8
 8000630:	4867      	ldr	r0, [pc, #412]	@ (80007d0 <MX_GPIO_Init+0x2d8>)
 8000632:	f001 faaf 	bl	8001b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800063c:	4865      	ldr	r0, [pc, #404]	@ (80007d4 <MX_GPIO_Init+0x2dc>)
 800063e:	f001 faa9 	bl	8001b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	21c8      	movs	r1, #200	@ 0xc8
 8000646:	4864      	ldr	r0, [pc, #400]	@ (80007d8 <MX_GPIO_Init+0x2e0>)
 8000648:	f001 faa4 	bl	8001b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 800064c:	2310      	movs	r3, #16
 800064e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000650:	2302      	movs	r3, #2
 8000652:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	2300      	movs	r3, #0
 8000656:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000658:	2300      	movs	r3, #0
 800065a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800065c:	230e      	movs	r3, #14
 800065e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8000660:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000664:	4619      	mov	r1, r3
 8000666:	485d      	ldr	r0, [pc, #372]	@ (80007dc <MX_GPIO_Init+0x2e4>)
 8000668:	f001 f8e8 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800066c:	2308      	movs	r3, #8
 800066e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000670:	2300      	movs	r3, #0
 8000672:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000678:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800067c:	4619      	mov	r1, r3
 800067e:	4857      	ldr	r0, [pc, #348]	@ (80007dc <MX_GPIO_Init+0x2e4>)
 8000680:	f001 f8dc 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000684:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8000688:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068a:	2302      	movs	r3, #2
 800068c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000692:	2303      	movs	r3, #3
 8000694:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000696:	230b      	movs	r3, #11
 8000698:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800069a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800069e:	4619      	mov	r1, r3
 80006a0:	484d      	ldr	r0, [pc, #308]	@ (80007d8 <MX_GPIO_Init+0x2e0>)
 80006a2:	f001 f8cb 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80006a6:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80006aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ac:	2302      	movs	r3, #2
 80006ae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b4:	2303      	movs	r3, #3
 80006b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006b8:	230c      	movs	r3, #12
 80006ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80006c0:	4619      	mov	r1, r3
 80006c2:	4846      	ldr	r0, [pc, #280]	@ (80007dc <MX_GPIO_Init+0x2e4>)
 80006c4:	f001 f8ba 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80006c8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80006cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006ce:	2312      	movs	r3, #18
 80006d0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d6:	2300      	movs	r3, #0
 80006d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006da:	2304      	movs	r3, #4
 80006dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80006e2:	4619      	mov	r1, r3
 80006e4:	483e      	ldr	r0, [pc, #248]	@ (80007e0 <MX_GPIO_Init+0x2e8>)
 80006e6:	f001 f8a9 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80006ea:	f643 4323 	movw	r3, #15395	@ 0x3c23
 80006ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f0:	2302      	movs	r3, #2
 80006f2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f8:	2303      	movs	r3, #3
 80006fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80006fc:	230a      	movs	r3, #10
 80006fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000700:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000704:	4619      	mov	r1, r3
 8000706:	4836      	ldr	r0, [pc, #216]	@ (80007e0 <MX_GPIO_Init+0x2e8>)
 8000708:	f001 f898 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800070c:	2310      	movs	r3, #16
 800070e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000710:	2302      	movs	r3, #2
 8000712:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000718:	2300      	movs	r3, #0
 800071a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800071c:	2302      	movs	r3, #2
 800071e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8000720:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000724:	4619      	mov	r1, r3
 8000726:	482e      	ldr	r0, [pc, #184]	@ (80007e0 <MX_GPIO_Init+0x2e8>)
 8000728:	f001 f888 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800072c:	2380      	movs	r3, #128	@ 0x80
 800072e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000730:	2302      	movs	r3, #2
 8000732:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000738:	2300      	movs	r3, #0
 800073a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800073c:	2308      	movs	r3, #8
 800073e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000740:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000744:	4619      	mov	r1, r3
 8000746:	4820      	ldr	r0, [pc, #128]	@ (80007c8 <MX_GPIO_Init+0x2d0>)
 8000748:	f001 f878 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800074c:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000750:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000752:	2302      	movs	r3, #2
 8000754:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075a:	2303      	movs	r3, #3
 800075c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800075e:	230c      	movs	r3, #12
 8000760:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000762:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000766:	4619      	mov	r1, r3
 8000768:	481e      	ldr	r0, [pc, #120]	@ (80007e4 <MX_GPIO_Init+0x2ec>)
 800076a:	f001 f867 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800076e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000772:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000774:	2302      	movs	r3, #2
 8000776:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077c:	2300      	movs	r3, #0
 800077e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000780:	2301      	movs	r3, #1
 8000782:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000784:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000788:	4619      	mov	r1, r3
 800078a:	4817      	ldr	r0, [pc, #92]	@ (80007e8 <MX_GPIO_Init+0x2f0>)
 800078c:	f001 f856 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8000790:	2360      	movs	r3, #96	@ 0x60
 8000792:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000794:	2302      	movs	r3, #2
 8000796:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079c:	2300      	movs	r3, #0
 800079e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007a0:	230d      	movs	r3, #13
 80007a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007a8:	4619      	mov	r1, r3
 80007aa:	480c      	ldr	r0, [pc, #48]	@ (80007dc <MX_GPIO_Init+0x2e4>)
 80007ac:	f001 f846 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 80007b0:	2380      	movs	r3, #128	@ 0x80
 80007b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b4:	2302      	movs	r3, #2
 80007b6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2300      	movs	r3, #0
 80007be:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007c0:	2307      	movs	r3, #7
 80007c2:	e013      	b.n	80007ec <MX_GPIO_Init+0x2f4>
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40020c00 	.word	0x40020c00
 80007cc:	40022000 	.word	0x40022000
 80007d0:	40022800 	.word	0x40022800
 80007d4:	40021c00 	.word	0x40021c00
 80007d8:	40021800 	.word	0x40021800
 80007dc:	40021000 	.word	0x40021000
 80007e0:	40020400 	.word	0x40020400
 80007e4:	40020800 	.word	0x40020800
 80007e8:	40020000 	.word	0x40020000
 80007ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80007ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007f2:	4619      	mov	r1, r3
 80007f4:	48bc      	ldr	r0, [pc, #752]	@ (8000ae8 <MX_GPIO_Init+0x5f0>)
 80007f6:	f001 f821 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80007fa:	f248 1333 	movw	r3, #33075	@ 0x8133
 80007fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000800:	2302      	movs	r3, #2
 8000802:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000808:	2303      	movs	r3, #3
 800080a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800080c:	230c      	movs	r3, #12
 800080e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000810:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000814:	4619      	mov	r1, r3
 8000816:	48b5      	ldr	r0, [pc, #724]	@ (8000aec <MX_GPIO_Init+0x5f4>)
 8000818:	f001 f810 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 800081c:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8000820:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000822:	2302      	movs	r3, #2
 8000824:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800082e:	230e      	movs	r3, #14
 8000830:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000832:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000836:	4619      	mov	r1, r3
 8000838:	48ad      	ldr	r0, [pc, #692]	@ (8000af0 <MX_GPIO_Init+0x5f8>)
 800083a:	f000 ffff 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800083e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000842:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000844:	2300      	movs	r3, #0
 8000846:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800084c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000850:	4619      	mov	r1, r3
 8000852:	48a7      	ldr	r0, [pc, #668]	@ (8000af0 <MX_GPIO_Init+0x5f8>)
 8000854:	f000 fff2 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000858:	2340      	movs	r3, #64	@ 0x40
 800085a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800085c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000860:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800086a:	4619      	mov	r1, r3
 800086c:	48a1      	ldr	r0, [pc, #644]	@ (8000af4 <MX_GPIO_Init+0x5fc>)
 800086e:	f000 ffe5 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000872:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000876:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000878:	2302      	movs	r3, #2
 800087a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000880:	2303      	movs	r3, #3
 8000882:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000884:	230c      	movs	r3, #12
 8000886:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000888:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800088c:	4619      	mov	r1, r3
 800088e:	4899      	ldr	r0, [pc, #612]	@ (8000af4 <MX_GPIO_Init+0x5fc>)
 8000890:	f000 ffd4 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8000894:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000898:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089a:	2302      	movs	r3, #2
 800089c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a2:	2303      	movs	r3, #3
 80008a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008a6:	230a      	movs	r3, #10
 80008a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008ae:	4619      	mov	r1, r3
 80008b0:	4891      	ldr	r0, [pc, #580]	@ (8000af8 <MX_GPIO_Init+0x600>)
 80008b2:	f000 ffc3 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80008b6:	23f0      	movs	r3, #240	@ 0xf0
 80008b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ba:	2302      	movs	r3, #2
 80008bc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80008c6:	230a      	movs	r3, #10
 80008c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80008ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008ce:	4619      	mov	r1, r3
 80008d0:	488a      	ldr	r0, [pc, #552]	@ (8000afc <MX_GPIO_Init+0x604>)
 80008d2:	f000 ffb3 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin PKPin PKPin
                           PKPin PKPin PKPin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80008d6:	23f7      	movs	r3, #247	@ 0xf7
 80008d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80008e6:	230e      	movs	r3, #14
 80008e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80008ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80008ee:	4619      	mov	r1, r3
 80008f0:	4883      	ldr	r0, [pc, #524]	@ (8000b00 <MX_GPIO_Init+0x608>)
 80008f2:	f000 ffa3 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 80008f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fc:	2302      	movs	r3, #2
 80008fe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000908:	2309      	movs	r3, #9
 800090a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800090c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000910:	4619      	mov	r1, r3
 8000912:	4876      	ldr	r0, [pc, #472]	@ (8000aec <MX_GPIO_Init+0x5f4>)
 8000914:	f000 ff92 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000918:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800091c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091e:	2302      	movs	r3, #2
 8000920:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800092a:	230a      	movs	r3, #10
 800092c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000932:	4619      	mov	r1, r3
 8000934:	486d      	ldr	r0, [pc, #436]	@ (8000aec <MX_GPIO_Init+0x5f4>)
 8000936:	f000 ff81 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800093a:	2320      	movs	r3, #32
 800093c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093e:	2301      	movs	r3, #1
 8000940:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800094a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800094e:	4619      	mov	r1, r3
 8000950:	4868      	ldr	r0, [pc, #416]	@ (8000af4 <MX_GPIO_Init+0x5fc>)
 8000952:	f000 ff73 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000956:	2308      	movs	r3, #8
 8000958:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000966:	230d      	movs	r3, #13
 8000968:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800096e:	4619      	mov	r1, r3
 8000970:	4860      	ldr	r0, [pc, #384]	@ (8000af4 <MX_GPIO_Init+0x5fc>)
 8000972:	f000 ff63 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000976:	f241 030c 	movw	r3, #4108	@ 0x100c
 800097a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097c:	2301      	movs	r3, #1
 800097e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000988:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800098c:	4619      	mov	r1, r3
 800098e:	485b      	ldr	r0, [pc, #364]	@ (8000afc <MX_GPIO_Init+0x604>)
 8000990:	f000 ff54 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000994:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000998:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099a:	2300      	movs	r3, #0
 800099c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009a6:	4619      	mov	r1, r3
 80009a8:	4856      	ldr	r0, [pc, #344]	@ (8000b04 <MX_GPIO_Init+0x60c>)
 80009aa:	f000 ff47 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80009ae:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80009b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b4:	2302      	movs	r3, #2
 80009b6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009bc:	2303      	movs	r3, #3
 80009be:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009c0:	230c      	movs	r3, #12
 80009c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009c8:	4619      	mov	r1, r3
 80009ca:	484f      	ldr	r0, [pc, #316]	@ (8000b08 <MX_GPIO_Init+0x610>)
 80009cc:	f000 ff36 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80009d0:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 80009d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d6:	2302      	movs	r3, #2
 80009d8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009e2:	230e      	movs	r3, #14
 80009e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80009e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009ea:	4619      	mov	r1, r3
 80009ec:	4843      	ldr	r0, [pc, #268]	@ (8000afc <MX_GPIO_Init+0x604>)
 80009ee:	f000 ff25 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80009f2:	2308      	movs	r3, #8
 80009f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f6:	2301      	movs	r3, #1
 80009f8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000a02:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a06:	4619      	mov	r1, r3
 8000a08:	483d      	ldr	r0, [pc, #244]	@ (8000b00 <MX_GPIO_Init+0x608>)
 8000a0a:	f000 ff17 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000a0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a14:	2302      	movs	r3, #2
 8000a16:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000a20:	230d      	movs	r3, #13
 8000a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000a24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4830      	ldr	r0, [pc, #192]	@ (8000aec <MX_GPIO_Init+0x5f4>)
 8000a2c:	f000 ff06 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a30:	2310      	movs	r3, #16
 8000a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a34:	2300      	movs	r3, #0
 8000a36:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a3c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a40:	4619      	mov	r1, r3
 8000a42:	482c      	ldr	r0, [pc, #176]	@ (8000af4 <MX_GPIO_Init+0x5fc>)
 8000a44:	f000 fefa 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000a48:	2304      	movs	r3, #4
 8000a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a54:	2303      	movs	r3, #3
 8000a56:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000a58:	230c      	movs	r3, #12
 8000a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a60:	4619      	mov	r1, r3
 8000a62:	4824      	ldr	r0, [pc, #144]	@ (8000af4 <MX_GPIO_Init+0x5fc>)
 8000a64:	f000 feea 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000a68:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a76:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4823      	ldr	r0, [pc, #140]	@ (8000b0c <MX_GPIO_Init+0x614>)
 8000a7e:	f000 fedd 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8000a82:	2302      	movs	r3, #2
 8000a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a86:	2302      	movs	r3, #2
 8000a88:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a92:	2305      	movs	r3, #5
 8000a94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8000a96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4817      	ldr	r0, [pc, #92]	@ (8000afc <MX_GPIO_Init+0x604>)
 8000a9e:	f000 fecd 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000aa2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ab4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4814      	ldr	r0, [pc, #80]	@ (8000b0c <MX_GPIO_Init+0x614>)
 8000abc:	f000 febe 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000ac0:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8000ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ad2:	230d      	movs	r3, #13
 8000ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ad6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ada:	4619      	mov	r1, r3
 8000adc:	480b      	ldr	r0, [pc, #44]	@ (8000b0c <MX_GPIO_Init+0x614>)
 8000ade:	f000 fead 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e014      	b.n	8000b10 <MX_GPIO_Init+0x618>
 8000ae6:	bf00      	nop
 8000ae8:	40020400 	.word	0x40020400
 8000aec:	40021800 	.word	0x40021800
 8000af0:	40022400 	.word	0x40022400
 8000af4:	40020c00 	.word	0x40020c00
 8000af8:	40020000 	.word	0x40020000
 8000afc:	40022000 	.word	0x40022000
 8000b00:	40022800 	.word	0x40022800
 8000b04:	40020800 	.word	0x40020800
 8000b08:	40021400 	.word	0x40021400
 8000b0c:	40021c00 	.word	0x40021c00
 8000b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b12:	2302      	movs	r3, #2
 8000b14:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8000b22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b26:	4619      	mov	r1, r3
 8000b28:	4895      	ldr	r0, [pc, #596]	@ (8000d80 <MX_GPIO_Init+0x888>)
 8000b2a:	f000 fe87 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000b2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b34:	2302      	movs	r3, #2
 8000b36:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b40:	2307      	movs	r3, #7
 8000b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000b44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b48:	4619      	mov	r1, r3
 8000b4a:	488e      	ldr	r0, [pc, #568]	@ (8000d84 <MX_GPIO_Init+0x88c>)
 8000b4c:	f000 fe76 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000b50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	2302      	movs	r3, #2
 8000b58:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000b62:	2301      	movs	r3, #1
 8000b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000b66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4885      	ldr	r0, [pc, #532]	@ (8000d84 <MX_GPIO_Init+0x88c>)
 8000b6e:	f000 fe65 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000b72:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b78:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000b7c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000b82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b86:	4619      	mov	r1, r3
 8000b88:	487d      	ldr	r0, [pc, #500]	@ (8000d80 <MX_GPIO_Init+0x888>)
 8000b8a:	f000 fe57 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8000b8e:	23c0      	movs	r3, #192	@ 0xc0
 8000b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	2302      	movs	r3, #2
 8000b94:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000b9e:	2308      	movs	r3, #8
 8000ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4877      	ldr	r0, [pc, #476]	@ (8000d88 <MX_GPIO_Init+0x890>)
 8000baa:	f000 fe47 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000bae:	2310      	movs	r3, #16
 8000bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000bbe:	230a      	movs	r3, #10
 8000bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000bc2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4870      	ldr	r0, [pc, #448]	@ (8000d8c <MX_GPIO_Init+0x894>)
 8000bca:	f000 fe37 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000bce:	2328      	movs	r3, #40	@ 0x28
 8000bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000bde:	230c      	movs	r3, #12
 8000be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000be2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000be6:	4619      	mov	r1, r3
 8000be8:	4868      	ldr	r0, [pc, #416]	@ (8000d8c <MX_GPIO_Init+0x894>)
 8000bea:	f000 fe27 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8000bee:	23c8      	movs	r3, #200	@ 0xc8
 8000bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bfe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c02:	4619      	mov	r1, r3
 8000c04:	4862      	ldr	r0, [pc, #392]	@ (8000d90 <MX_GPIO_Init+0x898>)
 8000c06:	f000 fe19 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000c0a:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8000c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c10:	2303      	movs	r3, #3
 8000c12:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c18:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	485d      	ldr	r0, [pc, #372]	@ (8000d94 <MX_GPIO_Init+0x89c>)
 8000c20:	f000 fe0c 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000c24:	2308      	movs	r3, #8
 8000c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c30:	2303      	movs	r3, #3
 8000c32:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c34:	230c      	movs	r3, #12
 8000c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000c38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4852      	ldr	r0, [pc, #328]	@ (8000d88 <MX_GPIO_Init+0x890>)
 8000c40:	f000 fdfc 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000c44:	2305      	movs	r3, #5
 8000c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c50:	2303      	movs	r3, #3
 8000c52:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000c54:	230a      	movs	r3, #10
 8000c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	484a      	ldr	r0, [pc, #296]	@ (8000d88 <MX_GPIO_Init+0x890>)
 8000c60:	f000 fdec 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c64:	2332      	movs	r3, #50	@ 0x32
 8000c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c70:	2303      	movs	r3, #3
 8000c72:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c74:	230b      	movs	r3, #11
 8000c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4842      	ldr	r0, [pc, #264]	@ (8000d88 <MX_GPIO_Init+0x890>)
 8000c80:	f000 fddc 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000c84:	2304      	movs	r3, #4
 8000c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000c90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c94:	4619      	mov	r1, r3
 8000c96:	483e      	ldr	r0, [pc, #248]	@ (8000d90 <MX_GPIO_Init+0x898>)
 8000c98:	f000 fdd0 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c9c:	2386      	movs	r3, #134	@ 0x86
 8000c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cac:	230b      	movs	r3, #11
 8000cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4833      	ldr	r0, [pc, #204]	@ (8000d84 <MX_GPIO_Init+0x88c>)
 8000cb8:	f000 fdc0 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000cc8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ccc:	4619      	mov	r1, r3
 8000cce:	482d      	ldr	r0, [pc, #180]	@ (8000d84 <MX_GPIO_Init+0x88c>)
 8000cd0:	f000 fdb4 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000cd4:	2350      	movs	r3, #80	@ 0x50
 8000cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ce4:	230d      	movs	r3, #13
 8000ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cec:	4619      	mov	r1, r3
 8000cee:	4825      	ldr	r0, [pc, #148]	@ (8000d84 <MX_GPIO_Init+0x88c>)
 8000cf0:	f000 fda4 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000cf4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cfa:	2312      	movs	r3, #18
 8000cfc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d02:	2303      	movs	r3, #3
 8000d04:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d06:	2304      	movs	r3, #4
 8000d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d0e:	4619      	mov	r1, r3
 8000d10:	481e      	ldr	r0, [pc, #120]	@ (8000d8c <MX_GPIO_Init+0x894>)
 8000d12:	f000 fd93 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000d16:	2328      	movs	r3, #40	@ 0x28
 8000d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d22:	2303      	movs	r3, #3
 8000d24:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000d26:	230a      	movs	r3, #10
 8000d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4814      	ldr	r0, [pc, #80]	@ (8000d84 <MX_GPIO_Init+0x88c>)
 8000d32:	f000 fd83 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000d36:	2340      	movs	r3, #64	@ 0x40
 8000d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000d46:	2309      	movs	r3, #9
 8000d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000d4a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d4e:	4619      	mov	r1, r3
 8000d50:	480e      	ldr	r0, [pc, #56]	@ (8000d8c <MX_GPIO_Init+0x894>)
 8000d52:	f000 fd73 	bl	800183c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000d56:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2300      	movs	r3, #0
 8000d66:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d68:	2305      	movs	r3, #5
 8000d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d70:	4619      	mov	r1, r3
 8000d72:	4809      	ldr	r0, [pc, #36]	@ (8000d98 <MX_GPIO_Init+0x8a0>)
 8000d74:	f000 fd62 	bl	800183c <HAL_GPIO_Init>

}
 8000d78:	bf00      	nop
 8000d7a:	3740      	adds	r7, #64	@ 0x40
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40022000 	.word	0x40022000
 8000d84:	40020000 	.word	0x40020000
 8000d88:	40020800 	.word	0x40020800
 8000d8c:	40021c00 	.word	0x40021c00
 8000d90:	40021800 	.word	0x40021800
 8000d94:	40021400 	.word	0x40021400
 8000d98:	40020400 	.word	0x40020400

08000d9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d9c:	b5b0      	push	{r4, r5, r7, lr}
 8000d9e:	b09a      	sub	sp, #104	@ 0x68
 8000da0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000da2:	f000 fb74 	bl	800148e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000da6:	f000 f871 	bl	8000e8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000daa:	f7ff fba5 	bl	80004f8 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 8000dae:	f000 f8df 	bl	8000f70 <MX_QUADSPI_Init>
  /* USER CODE BEGIN 2 */
  uint8_t data_write[17] = {9,8,7,6,5,4,3,2,1,2,3,4,5,6,7,8,9}, data_read[10] = {}, byte_vcr[1] = {};
 8000db2:	4b34      	ldr	r3, [pc, #208]	@ (8000e84 <main+0xe8>)
 8000db4:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8000db8:	461d      	mov	r5, r3
 8000dba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dbe:	682b      	ldr	r3, [r5, #0]
 8000dc0:	7023      	strb	r3, [r4, #0]
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	643b      	str	r3, [r7, #64]	@ 0x40
 8000dc6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	809a      	strh	r2, [r3, #4]
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  QSPI_CommandTypeDef cmd={};
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	2238      	movs	r2, #56	@ 0x38
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f001 fff1 	bl	8002dc4 <memset>
  cmd.AddressSize = QSPI_ADDRESS_24_BITS;
 8000de2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000de6:	613b      	str	r3, [r7, #16]
  QSPI_QUAD_EN(&hqspi,&cmd);
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	4619      	mov	r1, r3
 8000dec:	4826      	ldr	r0, [pc, #152]	@ (8000e88 <main+0xec>)
 8000dee:	f000 fa19 	bl	8001224 <QSPI_QUAD_EN>
  QSPI_WRITE_EN(&hqspi,&cmd);
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	4619      	mov	r1, r3
 8000df6:	4824      	ldr	r0, [pc, #144]	@ (8000e88 <main+0xec>)
 8000df8:	f000 fa54 	bl	80012a4 <QSPI_WRITE_EN>
  QSPI_ERASE_SUB4K(&hqspi,&cmd,0);
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	2200      	movs	r2, #0
 8000e00:	4619      	mov	r1, r3
 8000e02:	4821      	ldr	r0, [pc, #132]	@ (8000e88 <main+0xec>)
 8000e04:	f000 fa8e 	bl	8001324 <QSPI_ERASE_SUB4K>
  HAL_Delay(10);
 8000e08:	200a      	movs	r0, #10
 8000e0a:	f000 fb9d 	bl	8001548 <HAL_Delay>
  QSPI_WRITE_EN(&hqspi,&cmd);
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	4619      	mov	r1, r3
 8000e12:	481d      	ldr	r0, [pc, #116]	@ (8000e88 <main+0xec>)
 8000e14:	f000 fa46 	bl	80012a4 <QSPI_WRITE_EN>
  QSPI_WRITE(&hqspi,&cmd,25,data_write,19);
 8000e18:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000e1c:	1d39      	adds	r1, r7, #4
 8000e1e:	2213      	movs	r2, #19
 8000e20:	9200      	str	r2, [sp, #0]
 8000e22:	2219      	movs	r2, #25
 8000e24:	4818      	ldr	r0, [pc, #96]	@ (8000e88 <main+0xec>)
 8000e26:	f000 f995 	bl	8001154 <QSPI_WRITE>
  HAL_Delay(1);
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	f000 fb8c 	bl	8001548 <HAL_Delay>
  *byte_vcr = 0x8F;
 8000e30:	238f      	movs	r3, #143	@ 0x8f
 8000e32:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  QSPI_WRITE_VCR(&hqspi,&cmd,byte_vcr);
 8000e36:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4812      	ldr	r0, [pc, #72]	@ (8000e88 <main+0xec>)
 8000e40:	f000 f952 	bl	80010e8 <QSPI_WRITE_VCR>
  QSPI_READ(&hqspi,&cmd,30,data_read,10);
 8000e44:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000e48:	1d39      	adds	r1, r7, #4
 8000e4a:	220a      	movs	r2, #10
 8000e4c:	9200      	str	r2, [sp, #0]
 8000e4e:	221e      	movs	r2, #30
 8000e50:	480d      	ldr	r0, [pc, #52]	@ (8000e88 <main+0xec>)
 8000e52:	f000 f9b3 	bl	80011bc <QSPI_READ>
  *byte_vcr = 0x0F;
 8000e56:	230f      	movs	r3, #15
 8000e58:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  QSPI_WRITE_VCR(&hqspi,&cmd,byte_vcr);
 8000e5c:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	4619      	mov	r1, r3
 8000e64:	4808      	ldr	r0, [pc, #32]	@ (8000e88 <main+0xec>)
 8000e66:	f000 f93f 	bl	80010e8 <QSPI_WRITE_VCR>
  QSPI_WRITE_DIS(&hqspi,&cmd);
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4806      	ldr	r0, [pc, #24]	@ (8000e88 <main+0xec>)
 8000e70:	f000 fa38 	bl	80012e4 <QSPI_WRITE_DIS>
  QSPI_QUAD_DIS(&hqspi,&cmd);
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	4619      	mov	r1, r3
 8000e78:	4803      	ldr	r0, [pc, #12]	@ (8000e88 <main+0xec>)
 8000e7a:	f000 f9f3 	bl	8001264 <QSPI_QUAD_DIS>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e7e:	bf00      	nop
 8000e80:	e7fd      	b.n	8000e7e <main+0xe2>
 8000e82:	bf00      	nop
 8000e84:	08002e34 	.word	0x08002e34
 8000e88:	20000028 	.word	0x20000028

08000e8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b094      	sub	sp, #80	@ 0x50
 8000e90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e92:	f107 0320 	add.w	r3, r7, #32
 8000e96:	2230      	movs	r2, #48	@ 0x30
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f001 ff92 	bl	8002dc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea0:	f107 030c 	add.w	r3, r7, #12
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb0:	4b2a      	ldr	r3, [pc, #168]	@ (8000f5c <SystemClock_Config+0xd0>)
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb4:	4a29      	ldr	r2, [pc, #164]	@ (8000f5c <SystemClock_Config+0xd0>)
 8000eb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eba:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ebc:	4b27      	ldr	r3, [pc, #156]	@ (8000f5c <SystemClock_Config+0xd0>)
 8000ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ec8:	4b25      	ldr	r3, [pc, #148]	@ (8000f60 <SystemClock_Config+0xd4>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a24      	ldr	r2, [pc, #144]	@ (8000f60 <SystemClock_Config+0xd4>)
 8000ece:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ed2:	6013      	str	r3, [r2, #0]
 8000ed4:	4b22      	ldr	r3, [pc, #136]	@ (8000f60 <SystemClock_Config+0xd4>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000edc:	607b      	str	r3, [r7, #4]
 8000ede:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ee8:	2310      	movs	r3, #16
 8000eea:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eec:	2302      	movs	r3, #2
 8000eee:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ef4:	2308      	movs	r3, #8
 8000ef6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000ef8:	23d8      	movs	r3, #216	@ 0xd8
 8000efa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000efc:	2302      	movs	r3, #2
 8000efe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000f00:	2302      	movs	r3, #2
 8000f02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f04:	f107 0320 	add.w	r3, r7, #32
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f001 fb05 	bl	8002518 <HAL_RCC_OscConfig>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000f14:	f000 f826 	bl	8000f64 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000f18:	f000 fe56 	bl	8001bc8 <HAL_PWREx_EnableOverDrive>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f22:	f000 f81f 	bl	8000f64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f26:	230f      	movs	r3, #15
 8000f28:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f32:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f3c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000f3e:	f107 030c 	add.w	r3, r7, #12
 8000f42:	2107      	movs	r1, #7
 8000f44:	4618      	mov	r0, r3
 8000f46:	f001 fd8b 	bl	8002a60 <HAL_RCC_ClockConfig>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000f50:	f000 f808 	bl	8000f64 <Error_Handler>
  }
}
 8000f54:	bf00      	nop
 8000f56:	3750      	adds	r7, #80	@ 0x50
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40007000 	.word	0x40007000

08000f64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f68:	b672      	cpsid	i
}
 8000f6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f6c:	bf00      	nop
 8000f6e:	e7fd      	b.n	8000f6c <Error_Handler+0x8>

08000f70 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8000f74:	4b12      	ldr	r3, [pc, #72]	@ (8000fc0 <MX_QUADSPI_Init+0x50>)
 8000f76:	4a13      	ldr	r2, [pc, #76]	@ (8000fc4 <MX_QUADSPI_Init+0x54>)
 8000f78:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000f7a:	4b11      	ldr	r3, [pc, #68]	@ (8000fc0 <MX_QUADSPI_Init+0x50>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000f80:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc0 <MX_QUADSPI_Init+0x50>)
 8000f82:	2204      	movs	r2, #4
 8000f84:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000f86:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc0 <MX_QUADSPI_Init+0x50>)
 8000f88:	2210      	movs	r2, #16
 8000f8a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc0 <MX_QUADSPI_Init+0x50>)
 8000f8e:	2217      	movs	r2, #23
 8000f90:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8000f92:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc0 <MX_QUADSPI_Init+0x50>)
 8000f94:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000f98:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000f9a:	4b09      	ldr	r3, [pc, #36]	@ (8000fc0 <MX_QUADSPI_Init+0x50>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000fa0:	4b07      	ldr	r3, [pc, #28]	@ (8000fc0 <MX_QUADSPI_Init+0x50>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000fa6:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <MX_QUADSPI_Init+0x50>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000fac:	4804      	ldr	r0, [pc, #16]	@ (8000fc0 <MX_QUADSPI_Init+0x50>)
 8000fae:	f000 fe5b 	bl	8001c68 <HAL_QSPI_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8000fb8:	f7ff ffd4 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000028 	.word	0x20000028
 8000fc4:	a0001000 	.word	0xa0001000

08000fc8 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08c      	sub	sp, #48	@ 0x30
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	f107 031c 	add.w	r3, r7, #28
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a3b      	ldr	r2, [pc, #236]	@ (80010d4 <HAL_QSPI_MspInit+0x10c>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d170      	bne.n	80010cc <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000fea:	4b3b      	ldr	r3, [pc, #236]	@ (80010d8 <HAL_QSPI_MspInit+0x110>)
 8000fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fee:	4a3a      	ldr	r2, [pc, #232]	@ (80010d8 <HAL_QSPI_MspInit+0x110>)
 8000ff0:	f043 0302 	orr.w	r3, r3, #2
 8000ff4:	6393      	str	r3, [r2, #56]	@ 0x38
 8000ff6:	4b38      	ldr	r3, [pc, #224]	@ (80010d8 <HAL_QSPI_MspInit+0x110>)
 8000ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	61bb      	str	r3, [r7, #24]
 8001000:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001002:	4b35      	ldr	r3, [pc, #212]	@ (80010d8 <HAL_QSPI_MspInit+0x110>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	4a34      	ldr	r2, [pc, #208]	@ (80010d8 <HAL_QSPI_MspInit+0x110>)
 8001008:	f043 0310 	orr.w	r3, r3, #16
 800100c:	6313      	str	r3, [r2, #48]	@ 0x30
 800100e:	4b32      	ldr	r3, [pc, #200]	@ (80010d8 <HAL_QSPI_MspInit+0x110>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	f003 0310 	and.w	r3, r3, #16
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101a:	4b2f      	ldr	r3, [pc, #188]	@ (80010d8 <HAL_QSPI_MspInit+0x110>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	4a2e      	ldr	r2, [pc, #184]	@ (80010d8 <HAL_QSPI_MspInit+0x110>)
 8001020:	f043 0302 	orr.w	r3, r3, #2
 8001024:	6313      	str	r3, [r2, #48]	@ 0x30
 8001026:	4b2c      	ldr	r3, [pc, #176]	@ (80010d8 <HAL_QSPI_MspInit+0x110>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001032:	4b29      	ldr	r3, [pc, #164]	@ (80010d8 <HAL_QSPI_MspInit+0x110>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001036:	4a28      	ldr	r2, [pc, #160]	@ (80010d8 <HAL_QSPI_MspInit+0x110>)
 8001038:	f043 0308 	orr.w	r3, r3, #8
 800103c:	6313      	str	r3, [r2, #48]	@ 0x30
 800103e:	4b26      	ldr	r3, [pc, #152]	@ (80010d8 <HAL_QSPI_MspInit+0x110>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001042:	f003 0308 	and.w	r3, r3, #8
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800104a:	2304      	movs	r3, #4
 800104c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	2302      	movs	r3, #2
 8001050:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001056:	2303      	movs	r3, #3
 8001058:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800105a:	2309      	movs	r3, #9
 800105c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800105e:	f107 031c 	add.w	r3, r7, #28
 8001062:	4619      	mov	r1, r3
 8001064:	481d      	ldr	r0, [pc, #116]	@ (80010dc <HAL_QSPI_MspInit+0x114>)
 8001066:	f000 fbe9 	bl	800183c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800106a:	2340      	movs	r3, #64	@ 0x40
 800106c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106e:	2302      	movs	r3, #2
 8001070:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001076:	2303      	movs	r3, #3
 8001078:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800107a:	230a      	movs	r3, #10
 800107c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800107e:	f107 031c 	add.w	r3, r7, #28
 8001082:	4619      	mov	r1, r3
 8001084:	4816      	ldr	r0, [pc, #88]	@ (80010e0 <HAL_QSPI_MspInit+0x118>)
 8001086:	f000 fbd9 	bl	800183c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800108a:	2304      	movs	r3, #4
 800108c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108e:	2302      	movs	r3, #2
 8001090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001096:	2303      	movs	r3, #3
 8001098:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800109a:	2309      	movs	r3, #9
 800109c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109e:	f107 031c 	add.w	r3, r7, #28
 80010a2:	4619      	mov	r1, r3
 80010a4:	480e      	ldr	r0, [pc, #56]	@ (80010e0 <HAL_QSPI_MspInit+0x118>)
 80010a6:	f000 fbc9 	bl	800183c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80010aa:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80010ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b0:	2302      	movs	r3, #2
 80010b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b8:	2303      	movs	r3, #3
 80010ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80010bc:	2309      	movs	r3, #9
 80010be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010c0:	f107 031c 	add.w	r3, r7, #28
 80010c4:	4619      	mov	r1, r3
 80010c6:	4807      	ldr	r0, [pc, #28]	@ (80010e4 <HAL_QSPI_MspInit+0x11c>)
 80010c8:	f000 fbb8 	bl	800183c <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80010cc:	bf00      	nop
 80010ce:	3730      	adds	r7, #48	@ 0x30
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	a0001000 	.word	0xa0001000
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40021000 	.word	0x40021000
 80010e0:	40020400 	.word	0x40020400
 80010e4:	40020c00 	.word	0x40020c00

080010e8 <QSPI_WRITE_VCR>:
}

/* USER CODE BEGIN 1 */

void QSPI_WRITE_VCR(QSPI_HandleTypeDef* hqspi, QSPI_CommandTypeDef* cmd, uint8_t* data)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
	cmd->Instruction = cmd_write_vcr;
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	2281      	movs	r2, #129	@ 0x81
 80010f8:	601a      	str	r2, [r3, #0]
	cmd->AddressMode = QSPI_ADDRESS_NONE;
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	2200      	movs	r2, #0
 80010fe:	61da      	str	r2, [r3, #28]
	cmd->InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001106:	619a      	str	r2, [r3, #24]
	cmd->DataMode = QSPI_DATA_4_LINES;
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
 800110e:	625a      	str	r2, [r3, #36]	@ 0x24
	cmd->NbData = 1;
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	2201      	movs	r2, #1
 8001114:	629a      	str	r2, [r3, #40]	@ 0x28
	if(HAL_QSPI_Command(hqspi,cmd,10) != HAL_OK) Error_Handler();
 8001116:	220a      	movs	r2, #10
 8001118:	68b9      	ldr	r1, [r7, #8]
 800111a:	68f8      	ldr	r0, [r7, #12]
 800111c:	f000 fe20 	bl	8001d60 <HAL_QSPI_Command>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <QSPI_WRITE_VCR+0x42>
 8001126:	f7ff ff1d 	bl	8000f64 <Error_Handler>
	if(HAL_QSPI_Transmit(hqspi,data,10) != HAL_OK) Error_Handler();
 800112a:	220a      	movs	r2, #10
 800112c:	6879      	ldr	r1, [r7, #4]
 800112e:	68f8      	ldr	r0, [r7, #12]
 8001130:	f000 fe74 	bl	8001e1c <HAL_QSPI_Transmit>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <QSPI_WRITE_VCR+0x56>
 800113a:	f7ff ff13 	bl	8000f64 <Error_Handler>
	cmd->DummyCycles = *data >> 4;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	091b      	lsrs	r3, r3, #4
 8001144:	b2db      	uxtb	r3, r3
 8001146:	461a      	mov	r2, r3
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	615a      	str	r2, [r3, #20]
}
 800114c:	bf00      	nop
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <QSPI_WRITE>:

void QSPI_WRITE(QSPI_HandleTypeDef* hqspi, QSPI_CommandTypeDef* cmd, uint32_t addr,uint8_t* data, uint32_t size)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
 8001160:	603b      	str	r3, [r7, #0]
	cmd->Instruction = cmd_write;
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	2232      	movs	r2, #50	@ 0x32
 8001166:	601a      	str	r2, [r3, #0]
	cmd->Address = addr;
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	605a      	str	r2, [r3, #4]
	cmd->AddressMode = QSPI_ADDRESS_4_LINES;
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 8001174:	61da      	str	r2, [r3, #28]
	cmd->InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800117c:	619a      	str	r2, [r3, #24]
	cmd->DataMode = QSPI_DATA_4_LINES;
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
 8001184:	625a      	str	r2, [r3, #36]	@ 0x24
	cmd->NbData = size;
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	629a      	str	r2, [r3, #40]	@ 0x28
	if(HAL_QSPI_Command(hqspi,cmd,10) != HAL_OK) Error_Handler();
 800118c:	220a      	movs	r2, #10
 800118e:	68b9      	ldr	r1, [r7, #8]
 8001190:	68f8      	ldr	r0, [r7, #12]
 8001192:	f000 fde5 	bl	8001d60 <HAL_QSPI_Command>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <QSPI_WRITE+0x4c>
 800119c:	f7ff fee2 	bl	8000f64 <Error_Handler>
	if(HAL_QSPI_Transmit(hqspi,data,10) != HAL_OK) Error_Handler();
 80011a0:	220a      	movs	r2, #10
 80011a2:	6839      	ldr	r1, [r7, #0]
 80011a4:	68f8      	ldr	r0, [r7, #12]
 80011a6:	f000 fe39 	bl	8001e1c <HAL_QSPI_Transmit>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <QSPI_WRITE+0x60>
 80011b0:	f7ff fed8 	bl	8000f64 <Error_Handler>
}
 80011b4:	bf00      	nop
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <QSPI_READ>:

void QSPI_READ(QSPI_HandleTypeDef* hqspi, QSPI_CommandTypeDef* cmd, uint32_t addr, uint8_t* data, uint32_t size)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
 80011c8:	603b      	str	r3, [r7, #0]
	cmd->Instruction = cmd_read;
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	22eb      	movs	r2, #235	@ 0xeb
 80011ce:	601a      	str	r2, [r3, #0]
	cmd->Address = addr;
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	605a      	str	r2, [r3, #4]
	cmd->AddressMode = QSPI_ADDRESS_4_LINES;
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 80011dc:	61da      	str	r2, [r3, #28]
	cmd->InstructionMode = QSPI_INSTRUCTION_4_LINES;
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80011e4:	619a      	str	r2, [r3, #24]
	cmd->DataMode = QSPI_DATA_4_LINES;
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
 80011ec:	625a      	str	r2, [r3, #36]	@ 0x24
	cmd->NbData = size;
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	629a      	str	r2, [r3, #40]	@ 0x28
	if(HAL_QSPI_Command(hqspi,cmd,10) != HAL_OK) Error_Handler();
 80011f4:	220a      	movs	r2, #10
 80011f6:	68b9      	ldr	r1, [r7, #8]
 80011f8:	68f8      	ldr	r0, [r7, #12]
 80011fa:	f000 fdb1 	bl	8001d60 <HAL_QSPI_Command>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <QSPI_READ+0x4c>
 8001204:	f7ff feae 	bl	8000f64 <Error_Handler>
	if(HAL_QSPI_Receive(hqspi,data,10) != HAL_OK) Error_Handler();
 8001208:	220a      	movs	r2, #10
 800120a:	6839      	ldr	r1, [r7, #0]
 800120c:	68f8      	ldr	r0, [r7, #12]
 800120e:	f000 fe9c 	bl	8001f4a <HAL_QSPI_Receive>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <QSPI_READ+0x60>
 8001218:	f7ff fea4 	bl	8000f64 <Error_Handler>
}
 800121c:	bf00      	nop
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <QSPI_QUAD_EN>:

void QSPI_QUAD_EN(QSPI_HandleTypeDef* hqspi, QSPI_CommandTypeDef* cmd)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
	cmd->Instruction = cmd_quad_en;
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	2235      	movs	r2, #53	@ 0x35
 8001232:	601a      	str	r2, [r3, #0]
	cmd->AddressMode = QSPI_ADDRESS_NONE;
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	2200      	movs	r2, #0
 8001238:	61da      	str	r2, [r3, #28]
	cmd->InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001240:	619a      	str	r2, [r3, #24]
	cmd->DataMode = QSPI_DATA_NONE;
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	2200      	movs	r2, #0
 8001246:	625a      	str	r2, [r3, #36]	@ 0x24
	if(HAL_QSPI_Command(hqspi,cmd,10) != HAL_OK) Error_Handler();
 8001248:	220a      	movs	r2, #10
 800124a:	6839      	ldr	r1, [r7, #0]
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f000 fd87 	bl	8001d60 <HAL_QSPI_Command>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <QSPI_QUAD_EN+0x38>
 8001258:	f7ff fe84 	bl	8000f64 <Error_Handler>
}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <QSPI_QUAD_DIS>:

void QSPI_QUAD_DIS(QSPI_HandleTypeDef* hqspi, QSPI_CommandTypeDef* cmd)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
	cmd->Instruction = cmd_quad_dis;
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	22f5      	movs	r2, #245	@ 0xf5
 8001272:	601a      	str	r2, [r3, #0]
	cmd->AddressMode = QSPI_ADDRESS_NONE;
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	2200      	movs	r2, #0
 8001278:	61da      	str	r2, [r3, #28]
	cmd->InstructionMode = QSPI_INSTRUCTION_4_LINES;
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001280:	619a      	str	r2, [r3, #24]
	cmd->DataMode = QSPI_DATA_NONE;
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	2200      	movs	r2, #0
 8001286:	625a      	str	r2, [r3, #36]	@ 0x24
	if(HAL_QSPI_Command(hqspi,cmd,10) != HAL_OK) Error_Handler();
 8001288:	220a      	movs	r2, #10
 800128a:	6839      	ldr	r1, [r7, #0]
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f000 fd67 	bl	8001d60 <HAL_QSPI_Command>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <QSPI_QUAD_DIS+0x38>
 8001298:	f7ff fe64 	bl	8000f64 <Error_Handler>
}
 800129c:	bf00      	nop
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <QSPI_WRITE_EN>:

void QSPI_WRITE_EN(QSPI_HandleTypeDef* hqspi, QSPI_CommandTypeDef* cmd)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
	cmd->Instruction = cmd_write_en;
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	2206      	movs	r2, #6
 80012b2:	601a      	str	r2, [r3, #0]
	cmd->AddressMode = QSPI_ADDRESS_NONE;
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	2200      	movs	r2, #0
 80012b8:	61da      	str	r2, [r3, #28]
	cmd->InstructionMode = QSPI_INSTRUCTION_4_LINES;
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80012c0:	619a      	str	r2, [r3, #24]
	cmd->DataMode = QSPI_DATA_NONE;
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	2200      	movs	r2, #0
 80012c6:	625a      	str	r2, [r3, #36]	@ 0x24
	if(HAL_QSPI_Command(hqspi,cmd,10) != HAL_OK) Error_Handler();
 80012c8:	220a      	movs	r2, #10
 80012ca:	6839      	ldr	r1, [r7, #0]
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f000 fd47 	bl	8001d60 <HAL_QSPI_Command>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <QSPI_WRITE_EN+0x38>
 80012d8:	f7ff fe44 	bl	8000f64 <Error_Handler>
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <QSPI_WRITE_DIS>:

void QSPI_WRITE_DIS(QSPI_HandleTypeDef* hqspi, QSPI_CommandTypeDef* cmd)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
	cmd->Instruction = cmd_write_dis;
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	2204      	movs	r2, #4
 80012f2:	601a      	str	r2, [r3, #0]
	cmd->AddressMode = QSPI_ADDRESS_NONE;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	2200      	movs	r2, #0
 80012f8:	61da      	str	r2, [r3, #28]
	cmd->InstructionMode = QSPI_INSTRUCTION_4_LINES;
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001300:	619a      	str	r2, [r3, #24]
	cmd->DataMode = QSPI_DATA_NONE;
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	2200      	movs	r2, #0
 8001306:	625a      	str	r2, [r3, #36]	@ 0x24
	if(HAL_QSPI_Command(hqspi,cmd,10) != HAL_OK) Error_Handler();
 8001308:	220a      	movs	r2, #10
 800130a:	6839      	ldr	r1, [r7, #0]
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f000 fd27 	bl	8001d60 <HAL_QSPI_Command>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <QSPI_WRITE_DIS+0x38>
 8001318:	f7ff fe24 	bl	8000f64 <Error_Handler>
}
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <QSPI_ERASE_SUB4K>:

void QSPI_ERASE_SUB4K(QSPI_HandleTypeDef* hqspi, QSPI_CommandTypeDef* cmd, uint32_t addr)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
	cmd->Instruction = cmd_erase_sub4k;
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	2220      	movs	r2, #32
 8001334:	601a      	str	r2, [r3, #0]
	cmd->Address = addr;
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	605a      	str	r2, [r3, #4]
	cmd->AddressMode = QSPI_ADDRESS_4_LINES;
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 8001342:	61da      	str	r2, [r3, #28]
	cmd->InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800134a:	619a      	str	r2, [r3, #24]
	cmd->DataMode = QSPI_DATA_NONE;
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	2200      	movs	r2, #0
 8001350:	625a      	str	r2, [r3, #36]	@ 0x24
	if(HAL_QSPI_Command(hqspi,cmd,10) != HAL_OK) Error_Handler();
 8001352:	220a      	movs	r2, #10
 8001354:	68b9      	ldr	r1, [r7, #8]
 8001356:	68f8      	ldr	r0, [r7, #12]
 8001358:	f000 fd02 	bl	8001d60 <HAL_QSPI_Command>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <QSPI_ERASE_SUB4K+0x42>
 8001362:	f7ff fdff 	bl	8000f64 <Error_Handler>
}
 8001366:	bf00      	nop
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001376:	4b0f      	ldr	r3, [pc, #60]	@ (80013b4 <HAL_MspInit+0x44>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137a:	4a0e      	ldr	r2, [pc, #56]	@ (80013b4 <HAL_MspInit+0x44>)
 800137c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001380:	6413      	str	r3, [r2, #64]	@ 0x40
 8001382:	4b0c      	ldr	r3, [pc, #48]	@ (80013b4 <HAL_MspInit+0x44>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138e:	4b09      	ldr	r3, [pc, #36]	@ (80013b4 <HAL_MspInit+0x44>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001392:	4a08      	ldr	r2, [pc, #32]	@ (80013b4 <HAL_MspInit+0x44>)
 8001394:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001398:	6453      	str	r3, [r2, #68]	@ 0x44
 800139a:	4b06      	ldr	r3, [pc, #24]	@ (80013b4 <HAL_MspInit+0x44>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800139e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013a2:	603b      	str	r3, [r7, #0]
 80013a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	40023800 	.word	0x40023800

080013b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013bc:	bf00      	nop
 80013be:	e7fd      	b.n	80013bc <NMI_Handler+0x4>

080013c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c4:	bf00      	nop
 80013c6:	e7fd      	b.n	80013c4 <HardFault_Handler+0x4>

080013c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013cc:	bf00      	nop
 80013ce:	e7fd      	b.n	80013cc <MemManage_Handler+0x4>

080013d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d4:	bf00      	nop
 80013d6:	e7fd      	b.n	80013d4 <BusFault_Handler+0x4>

080013d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013dc:	bf00      	nop
 80013de:	e7fd      	b.n	80013dc <UsageFault_Handler+0x4>

080013e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800140e:	f000 f87b 	bl	8001508 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800141c:	4b06      	ldr	r3, [pc, #24]	@ (8001438 <SystemInit+0x20>)
 800141e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001422:	4a05      	ldr	r2, [pc, #20]	@ (8001438 <SystemInit+0x20>)
 8001424:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001428:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800143c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001474 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001440:	480d      	ldr	r0, [pc, #52]	@ (8001478 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001442:	490e      	ldr	r1, [pc, #56]	@ (800147c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001444:	4a0e      	ldr	r2, [pc, #56]	@ (8001480 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001448:	e002      	b.n	8001450 <LoopCopyDataInit>

0800144a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800144a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800144c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800144e:	3304      	adds	r3, #4

08001450 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001450:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001452:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001454:	d3f9      	bcc.n	800144a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001456:	4a0b      	ldr	r2, [pc, #44]	@ (8001484 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001458:	4c0b      	ldr	r4, [pc, #44]	@ (8001488 <LoopFillZerobss+0x26>)
  movs r3, #0
 800145a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800145c:	e001      	b.n	8001462 <LoopFillZerobss>

0800145e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800145e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001460:	3204      	adds	r2, #4

08001462 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001462:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001464:	d3fb      	bcc.n	800145e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001466:	f7ff ffd7 	bl	8001418 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800146a:	f001 fcb3 	bl	8002dd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800146e:	f7ff fc95 	bl	8000d9c <main>
  bx  lr    
 8001472:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001474:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800147c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001480:	08002e68 	.word	0x08002e68
  ldr r2, =_sbss
 8001484:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001488:	20000078 	.word	0x20000078

0800148c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800148c:	e7fe      	b.n	800148c <ADC_IRQHandler>

0800148e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001492:	2003      	movs	r0, #3
 8001494:	f000 f92e 	bl	80016f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001498:	2000      	movs	r0, #0
 800149a:	f000 f805 	bl	80014a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800149e:	f7ff ff67 	bl	8001370 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014b0:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <HAL_InitTick+0x54>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4b12      	ldr	r3, [pc, #72]	@ (8001500 <HAL_InitTick+0x58>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	4619      	mov	r1, r3
 80014ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014be:	fbb3 f3f1 	udiv	r3, r3, r1
 80014c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 f93b 	bl	8001742 <HAL_SYSTICK_Config>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e00e      	b.n	80014f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b0f      	cmp	r3, #15
 80014da:	d80a      	bhi.n	80014f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014dc:	2200      	movs	r2, #0
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	f04f 30ff 	mov.w	r0, #4294967295
 80014e4:	f000 f911 	bl	800170a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e8:	4a06      	ldr	r2, [pc, #24]	@ (8001504 <HAL_InitTick+0x5c>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
 80014f0:	e000      	b.n	80014f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000000 	.word	0x20000000
 8001500:	20000008 	.word	0x20000008
 8001504:	20000004 	.word	0x20000004

08001508 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800150c:	4b06      	ldr	r3, [pc, #24]	@ (8001528 <HAL_IncTick+0x20>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	461a      	mov	r2, r3
 8001512:	4b06      	ldr	r3, [pc, #24]	@ (800152c <HAL_IncTick+0x24>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4413      	add	r3, r2
 8001518:	4a04      	ldr	r2, [pc, #16]	@ (800152c <HAL_IncTick+0x24>)
 800151a:	6013      	str	r3, [r2, #0]
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	20000008 	.word	0x20000008
 800152c:	20000074 	.word	0x20000074

08001530 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return uwTick;
 8001534:	4b03      	ldr	r3, [pc, #12]	@ (8001544 <HAL_GetTick+0x14>)
 8001536:	681b      	ldr	r3, [r3, #0]
}
 8001538:	4618      	mov	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	20000074 	.word	0x20000074

08001548 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001550:	f7ff ffee 	bl	8001530 <HAL_GetTick>
 8001554:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001560:	d005      	beq.n	800156e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001562:	4b0a      	ldr	r3, [pc, #40]	@ (800158c <HAL_Delay+0x44>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	461a      	mov	r2, r3
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	4413      	add	r3, r2
 800156c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800156e:	bf00      	nop
 8001570:	f7ff ffde 	bl	8001530 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	429a      	cmp	r2, r3
 800157e:	d8f7      	bhi.n	8001570 <HAL_Delay+0x28>
  {
  }
}
 8001580:	bf00      	nop
 8001582:	bf00      	nop
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000008 	.word	0x20000008

08001590 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a0:	4b0b      	ldr	r3, [pc, #44]	@ (80015d0 <__NVIC_SetPriorityGrouping+0x40>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015a6:	68ba      	ldr	r2, [r7, #8]
 80015a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015ac:	4013      	ands	r3, r2
 80015ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015b8:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <__NVIC_SetPriorityGrouping+0x44>)
 80015ba:	4313      	orrs	r3, r2
 80015bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015be:	4a04      	ldr	r2, [pc, #16]	@ (80015d0 <__NVIC_SetPriorityGrouping+0x40>)
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	60d3      	str	r3, [r2, #12]
}
 80015c4:	bf00      	nop
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	e000ed00 	.word	0xe000ed00
 80015d4:	05fa0000 	.word	0x05fa0000

080015d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015dc:	4b04      	ldr	r3, [pc, #16]	@ (80015f0 <__NVIC_GetPriorityGrouping+0x18>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	0a1b      	lsrs	r3, r3, #8
 80015e2:	f003 0307 	and.w	r3, r3, #7
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	6039      	str	r1, [r7, #0]
 80015fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001604:	2b00      	cmp	r3, #0
 8001606:	db0a      	blt.n	800161e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	b2da      	uxtb	r2, r3
 800160c:	490c      	ldr	r1, [pc, #48]	@ (8001640 <__NVIC_SetPriority+0x4c>)
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	0112      	lsls	r2, r2, #4
 8001614:	b2d2      	uxtb	r2, r2
 8001616:	440b      	add	r3, r1
 8001618:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800161c:	e00a      	b.n	8001634 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	b2da      	uxtb	r2, r3
 8001622:	4908      	ldr	r1, [pc, #32]	@ (8001644 <__NVIC_SetPriority+0x50>)
 8001624:	79fb      	ldrb	r3, [r7, #7]
 8001626:	f003 030f 	and.w	r3, r3, #15
 800162a:	3b04      	subs	r3, #4
 800162c:	0112      	lsls	r2, r2, #4
 800162e:	b2d2      	uxtb	r2, r2
 8001630:	440b      	add	r3, r1
 8001632:	761a      	strb	r2, [r3, #24]
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000e100 	.word	0xe000e100
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001648:	b480      	push	{r7}
 800164a:	b089      	sub	sp, #36	@ 0x24
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	f1c3 0307 	rsb	r3, r3, #7
 8001662:	2b04      	cmp	r3, #4
 8001664:	bf28      	it	cs
 8001666:	2304      	movcs	r3, #4
 8001668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3304      	adds	r3, #4
 800166e:	2b06      	cmp	r3, #6
 8001670:	d902      	bls.n	8001678 <NVIC_EncodePriority+0x30>
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3b03      	subs	r3, #3
 8001676:	e000      	b.n	800167a <NVIC_EncodePriority+0x32>
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800167c:	f04f 32ff 	mov.w	r2, #4294967295
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43da      	mvns	r2, r3
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	401a      	ands	r2, r3
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001690:	f04f 31ff 	mov.w	r1, #4294967295
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	fa01 f303 	lsl.w	r3, r1, r3
 800169a:	43d9      	mvns	r1, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a0:	4313      	orrs	r3, r2
         );
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3724      	adds	r7, #36	@ 0x24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
	...

080016b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016c0:	d301      	bcc.n	80016c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016c2:	2301      	movs	r3, #1
 80016c4:	e00f      	b.n	80016e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016c6:	4a0a      	ldr	r2, [pc, #40]	@ (80016f0 <SysTick_Config+0x40>)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ce:	210f      	movs	r1, #15
 80016d0:	f04f 30ff 	mov.w	r0, #4294967295
 80016d4:	f7ff ff8e 	bl	80015f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016d8:	4b05      	ldr	r3, [pc, #20]	@ (80016f0 <SysTick_Config+0x40>)
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016de:	4b04      	ldr	r3, [pc, #16]	@ (80016f0 <SysTick_Config+0x40>)
 80016e0:	2207      	movs	r2, #7
 80016e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	e000e010 	.word	0xe000e010

080016f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff ff47 	bl	8001590 <__NVIC_SetPriorityGrouping>
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800170a:	b580      	push	{r7, lr}
 800170c:	b086      	sub	sp, #24
 800170e:	af00      	add	r7, sp, #0
 8001710:	4603      	mov	r3, r0
 8001712:	60b9      	str	r1, [r7, #8]
 8001714:	607a      	str	r2, [r7, #4]
 8001716:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800171c:	f7ff ff5c 	bl	80015d8 <__NVIC_GetPriorityGrouping>
 8001720:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	68b9      	ldr	r1, [r7, #8]
 8001726:	6978      	ldr	r0, [r7, #20]
 8001728:	f7ff ff8e 	bl	8001648 <NVIC_EncodePriority>
 800172c:	4602      	mov	r2, r0
 800172e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001732:	4611      	mov	r1, r2
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff ff5d 	bl	80015f4 <__NVIC_SetPriority>
}
 800173a:	bf00      	nop
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff ffb0 	bl	80016b0 <SysTick_Config>
 8001750:	4603      	mov	r3, r0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b084      	sub	sp, #16
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001766:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001768:	f7ff fee2 	bl	8001530 <HAL_GetTick>
 800176c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d008      	beq.n	800178c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2280      	movs	r2, #128	@ 0x80
 800177e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e052      	b.n	8001832 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f022 0216 	bic.w	r2, r2, #22
 800179a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	695a      	ldr	r2, [r3, #20]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80017aa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d103      	bne.n	80017bc <HAL_DMA_Abort+0x62>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d007      	beq.n	80017cc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f022 0208 	bic.w	r2, r2, #8
 80017ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f022 0201 	bic.w	r2, r2, #1
 80017da:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017dc:	e013      	b.n	8001806 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017de:	f7ff fea7 	bl	8001530 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b05      	cmp	r3, #5
 80017ea:	d90c      	bls.n	8001806 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2220      	movs	r2, #32
 80017f0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2203      	movs	r2, #3
 80017f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e015      	b.n	8001832 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1e4      	bne.n	80017de <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001818:	223f      	movs	r2, #63	@ 0x3f
 800181a:	409a      	lsls	r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2201      	movs	r2, #1
 8001824:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800183c:	b480      	push	{r7}
 800183e:	b089      	sub	sp, #36	@ 0x24
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001846:	2300      	movs	r3, #0
 8001848:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800184a:	2300      	movs	r3, #0
 800184c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800184e:	2300      	movs	r3, #0
 8001850:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001852:	2300      	movs	r3, #0
 8001854:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001856:	2300      	movs	r3, #0
 8001858:	61fb      	str	r3, [r7, #28]
 800185a:	e175      	b.n	8001b48 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800185c:	2201      	movs	r2, #1
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	4013      	ands	r3, r2
 800186e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	429a      	cmp	r2, r3
 8001876:	f040 8164 	bne.w	8001b42 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f003 0303 	and.w	r3, r3, #3
 8001882:	2b01      	cmp	r3, #1
 8001884:	d005      	beq.n	8001892 <HAL_GPIO_Init+0x56>
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f003 0303 	and.w	r3, r3, #3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d130      	bne.n	80018f4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	2203      	movs	r2, #3
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43db      	mvns	r3, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4013      	ands	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	68da      	ldr	r2, [r3, #12]
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018c8:	2201      	movs	r2, #1
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	43db      	mvns	r3, r3
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	4013      	ands	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	091b      	lsrs	r3, r3, #4
 80018de:	f003 0201 	and.w	r2, r3, #1
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f003 0303 	and.w	r3, r3, #3
 80018fc:	2b03      	cmp	r3, #3
 80018fe:	d017      	beq.n	8001930 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	2203      	movs	r2, #3
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	4013      	ands	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	689a      	ldr	r2, [r3, #8]
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	4313      	orrs	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 0303 	and.w	r3, r3, #3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d123      	bne.n	8001984 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	08da      	lsrs	r2, r3, #3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3208      	adds	r2, #8
 8001944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001948:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	f003 0307 	and.w	r3, r3, #7
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	220f      	movs	r2, #15
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4013      	ands	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	691a      	ldr	r2, [r3, #16]
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4313      	orrs	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	08da      	lsrs	r2, r3, #3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	3208      	adds	r2, #8
 800197e:	69b9      	ldr	r1, [r7, #24]
 8001980:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	2203      	movs	r2, #3
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4013      	ands	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 0203 	and.w	r2, r3, #3
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f000 80be 	beq.w	8001b42 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c6:	4b66      	ldr	r3, [pc, #408]	@ (8001b60 <HAL_GPIO_Init+0x324>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ca:	4a65      	ldr	r2, [pc, #404]	@ (8001b60 <HAL_GPIO_Init+0x324>)
 80019cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80019d2:	4b63      	ldr	r3, [pc, #396]	@ (8001b60 <HAL_GPIO_Init+0x324>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80019de:	4a61      	ldr	r2, [pc, #388]	@ (8001b64 <HAL_GPIO_Init+0x328>)
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	089b      	lsrs	r3, r3, #2
 80019e4:	3302      	adds	r3, #2
 80019e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	f003 0303 	and.w	r3, r3, #3
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	220f      	movs	r2, #15
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	43db      	mvns	r3, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4013      	ands	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a58      	ldr	r2, [pc, #352]	@ (8001b68 <HAL_GPIO_Init+0x32c>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d037      	beq.n	8001a7a <HAL_GPIO_Init+0x23e>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a57      	ldr	r2, [pc, #348]	@ (8001b6c <HAL_GPIO_Init+0x330>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d031      	beq.n	8001a76 <HAL_GPIO_Init+0x23a>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a56      	ldr	r2, [pc, #344]	@ (8001b70 <HAL_GPIO_Init+0x334>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d02b      	beq.n	8001a72 <HAL_GPIO_Init+0x236>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a55      	ldr	r2, [pc, #340]	@ (8001b74 <HAL_GPIO_Init+0x338>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d025      	beq.n	8001a6e <HAL_GPIO_Init+0x232>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a54      	ldr	r2, [pc, #336]	@ (8001b78 <HAL_GPIO_Init+0x33c>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d01f      	beq.n	8001a6a <HAL_GPIO_Init+0x22e>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a53      	ldr	r2, [pc, #332]	@ (8001b7c <HAL_GPIO_Init+0x340>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d019      	beq.n	8001a66 <HAL_GPIO_Init+0x22a>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a52      	ldr	r2, [pc, #328]	@ (8001b80 <HAL_GPIO_Init+0x344>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d013      	beq.n	8001a62 <HAL_GPIO_Init+0x226>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a51      	ldr	r2, [pc, #324]	@ (8001b84 <HAL_GPIO_Init+0x348>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d00d      	beq.n	8001a5e <HAL_GPIO_Init+0x222>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a50      	ldr	r2, [pc, #320]	@ (8001b88 <HAL_GPIO_Init+0x34c>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d007      	beq.n	8001a5a <HAL_GPIO_Init+0x21e>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a4f      	ldr	r2, [pc, #316]	@ (8001b8c <HAL_GPIO_Init+0x350>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d101      	bne.n	8001a56 <HAL_GPIO_Init+0x21a>
 8001a52:	2309      	movs	r3, #9
 8001a54:	e012      	b.n	8001a7c <HAL_GPIO_Init+0x240>
 8001a56:	230a      	movs	r3, #10
 8001a58:	e010      	b.n	8001a7c <HAL_GPIO_Init+0x240>
 8001a5a:	2308      	movs	r3, #8
 8001a5c:	e00e      	b.n	8001a7c <HAL_GPIO_Init+0x240>
 8001a5e:	2307      	movs	r3, #7
 8001a60:	e00c      	b.n	8001a7c <HAL_GPIO_Init+0x240>
 8001a62:	2306      	movs	r3, #6
 8001a64:	e00a      	b.n	8001a7c <HAL_GPIO_Init+0x240>
 8001a66:	2305      	movs	r3, #5
 8001a68:	e008      	b.n	8001a7c <HAL_GPIO_Init+0x240>
 8001a6a:	2304      	movs	r3, #4
 8001a6c:	e006      	b.n	8001a7c <HAL_GPIO_Init+0x240>
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e004      	b.n	8001a7c <HAL_GPIO_Init+0x240>
 8001a72:	2302      	movs	r3, #2
 8001a74:	e002      	b.n	8001a7c <HAL_GPIO_Init+0x240>
 8001a76:	2301      	movs	r3, #1
 8001a78:	e000      	b.n	8001a7c <HAL_GPIO_Init+0x240>
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	69fa      	ldr	r2, [r7, #28]
 8001a7e:	f002 0203 	and.w	r2, r2, #3
 8001a82:	0092      	lsls	r2, r2, #2
 8001a84:	4093      	lsls	r3, r2
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001a8c:	4935      	ldr	r1, [pc, #212]	@ (8001b64 <HAL_GPIO_Init+0x328>)
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	089b      	lsrs	r3, r3, #2
 8001a92:	3302      	adds	r3, #2
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a9a:	4b3d      	ldr	r3, [pc, #244]	@ (8001b90 <HAL_GPIO_Init+0x354>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001abe:	4a34      	ldr	r2, [pc, #208]	@ (8001b90 <HAL_GPIO_Init+0x354>)
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ac4:	4b32      	ldr	r3, [pc, #200]	@ (8001b90 <HAL_GPIO_Init+0x354>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	43db      	mvns	r3, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d003      	beq.n	8001ae8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ae8:	4a29      	ldr	r2, [pc, #164]	@ (8001b90 <HAL_GPIO_Init+0x354>)
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001aee:	4b28      	ldr	r3, [pc, #160]	@ (8001b90 <HAL_GPIO_Init+0x354>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	43db      	mvns	r3, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4013      	ands	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d003      	beq.n	8001b12 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b12:	4a1f      	ldr	r2, [pc, #124]	@ (8001b90 <HAL_GPIO_Init+0x354>)
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b18:	4b1d      	ldr	r3, [pc, #116]	@ (8001b90 <HAL_GPIO_Init+0x354>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	43db      	mvns	r3, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d003      	beq.n	8001b3c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b3c:	4a14      	ldr	r2, [pc, #80]	@ (8001b90 <HAL_GPIO_Init+0x354>)
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	3301      	adds	r3, #1
 8001b46:	61fb      	str	r3, [r7, #28]
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	2b0f      	cmp	r3, #15
 8001b4c:	f67f ae86 	bls.w	800185c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001b50:	bf00      	nop
 8001b52:	bf00      	nop
 8001b54:	3724      	adds	r7, #36	@ 0x24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40013800 	.word	0x40013800
 8001b68:	40020000 	.word	0x40020000
 8001b6c:	40020400 	.word	0x40020400
 8001b70:	40020800 	.word	0x40020800
 8001b74:	40020c00 	.word	0x40020c00
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40021400 	.word	0x40021400
 8001b80:	40021800 	.word	0x40021800
 8001b84:	40021c00 	.word	0x40021c00
 8001b88:	40022000 	.word	0x40022000
 8001b8c:	40022400 	.word	0x40022400
 8001b90:	40013c00 	.word	0x40013c00

08001b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	807b      	strh	r3, [r7, #2]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ba4:	787b      	ldrb	r3, [r7, #1]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001baa:	887a      	ldrh	r2, [r7, #2]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001bb0:	e003      	b.n	8001bba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001bb2:	887b      	ldrh	r3, [r7, #2]
 8001bb4:	041a      	lsls	r2, r3, #16
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	619a      	str	r2, [r3, #24]
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
	...

08001bc8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001bd2:	4b23      	ldr	r3, [pc, #140]	@ (8001c60 <HAL_PWREx_EnableOverDrive+0x98>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd6:	4a22      	ldr	r2, [pc, #136]	@ (8001c60 <HAL_PWREx_EnableOverDrive+0x98>)
 8001bd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bde:	4b20      	ldr	r3, [pc, #128]	@ (8001c60 <HAL_PWREx_EnableOverDrive+0x98>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001be6:	603b      	str	r3, [r7, #0]
 8001be8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001bea:	4b1e      	ldr	r3, [pc, #120]	@ (8001c64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a1d      	ldr	r2, [pc, #116]	@ (8001c64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bf4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bf6:	f7ff fc9b 	bl	8001530 <HAL_GetTick>
 8001bfa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001bfc:	e009      	b.n	8001c12 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001bfe:	f7ff fc97 	bl	8001530 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c0c:	d901      	bls.n	8001c12 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e022      	b.n	8001c58 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c12:	4b14      	ldr	r3, [pc, #80]	@ (8001c64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c1e:	d1ee      	bne.n	8001bfe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001c20:	4b10      	ldr	r3, [pc, #64]	@ (8001c64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a0f      	ldr	r2, [pc, #60]	@ (8001c64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c2a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c2c:	f7ff fc80 	bl	8001530 <HAL_GetTick>
 8001c30:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c32:	e009      	b.n	8001c48 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c34:	f7ff fc7c 	bl	8001530 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c42:	d901      	bls.n	8001c48 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e007      	b.n	8001c58 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c48:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001c54:	d1ee      	bne.n	8001c34 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40023800 	.word	0x40023800
 8001c64:	40007000 	.word	0x40007000

08001c68 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af02      	add	r7, sp, #8
 8001c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001c70:	f7ff fc5e 	bl	8001530 <HAL_GetTick>
 8001c74:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d101      	bne.n	8001c80 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e067      	b.n	8001d50 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d10b      	bne.n	8001ca4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7ff f997 	bl	8000fc8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8001c9a:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 fa6e 	bl	8002180 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	021a      	lsls	r2, r3, #8
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	2120      	movs	r1, #32
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 fa66 	bl	800219c <QSPI_WaitFlagStateUntilTimeout>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8001cd4:	7afb      	ldrb	r3, [r7, #11]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d135      	bne.n	8001d46 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	4b1d      	ldr	r3, [pc, #116]	@ (8001d58 <HAL_QSPI_Init+0xf0>)
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	6852      	ldr	r2, [r2, #4]
 8001ce8:	0611      	lsls	r1, r2, #24
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	68d2      	ldr	r2, [r2, #12]
 8001cee:	4311      	orrs	r1, r2
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	69d2      	ldr	r2, [r2, #28]
 8001cf4:	4311      	orrs	r1, r2
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	6a12      	ldr	r2, [r2, #32]
 8001cfa:	4311      	orrs	r1, r2
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	6812      	ldr	r2, [r2, #0]
 8001d00:	430b      	orrs	r3, r1
 8001d02:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	685a      	ldr	r2, [r3, #4]
 8001d0a:	4b14      	ldr	r3, [pc, #80]	@ (8001d5c <HAL_QSPI_Init+0xf4>)
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	6912      	ldr	r2, [r2, #16]
 8001d12:	0411      	lsls	r1, r2, #16
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	6952      	ldr	r2, [r2, #20]
 8001d18:	4311      	orrs	r1, r2
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	6992      	ldr	r2, [r2, #24]
 8001d1e:	4311      	orrs	r1, r2
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	6812      	ldr	r2, [r2, #0]
 8001d24:	430b      	orrs	r3, r1
 8001d26:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f042 0201 	orr.w	r2, r2, #1
 8001d36:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8001d4e:	7afb      	ldrb	r3, [r7, #11]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	00ffff2f 	.word	0x00ffff2f
 8001d5c:	ffe0f8fe 	.word	0xffe0f8fe

08001d60 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b088      	sub	sp, #32
 8001d64:	af02      	add	r7, sp, #8
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001d6c:	f7ff fbe0 	bl	8001530 <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d101      	bne.n	8001d82 <HAL_QSPI_Command+0x22>
 8001d7e:	2302      	movs	r3, #2
 8001d80:	e048      	b.n	8001e14 <HAL_QSPI_Command+0xb4>
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d137      	bne.n	8001e06 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2202      	movs	r2, #2
 8001da0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	2200      	movs	r2, #0
 8001dac:	2120      	movs	r1, #32
 8001dae:	68f8      	ldr	r0, [r7, #12]
 8001db0:	f000 f9f4 	bl	800219c <QSPI_WaitFlagStateUntilTimeout>
 8001db4:	4603      	mov	r3, r0
 8001db6:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8001db8:	7dfb      	ldrb	r3, [r7, #23]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d125      	bne.n	8001e0a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	68b9      	ldr	r1, [r7, #8]
 8001dc2:	68f8      	ldr	r0, [r7, #12]
 8001dc4:	f000 fa21 	bl	800220a <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d115      	bne.n	8001dfc <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	2102      	movs	r1, #2
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f000 f9de 	bl	800219c <QSPI_WaitFlagStateUntilTimeout>
 8001de0:	4603      	mov	r3, r0
 8001de2:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8001de4:	7dfb      	ldrb	r3, [r7, #23]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d10f      	bne.n	8001e0a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2202      	movs	r2, #2
 8001df0:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001dfa:	e006      	b.n	8001e0a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001e04:	e001      	b.n	8001e0a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8001e06:	2302      	movs	r3, #2
 8001e08:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8001e12:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3718      	adds	r7, #24
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08a      	sub	sp, #40	@ 0x28
 8001e20:	af02      	add	r7, sp, #8
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8001e2c:	f7ff fb80 	bl	8001530 <HAL_GetTick>
 8001e30:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	3320      	adds	r3, #32
 8001e38:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d101      	bne.n	8001e4a <HAL_QSPI_Transmit+0x2e>
 8001e46:	2302      	movs	r3, #2
 8001e48:	e07b      	b.n	8001f42 <HAL_QSPI_Transmit+0x126>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d16a      	bne.n	8001f34 <HAL_QSPI_Transmit+0x118>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2200      	movs	r2, #0
 8001e62:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d05b      	beq.n	8001f22 <HAL_QSPI_Transmit+0x106>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2212      	movs	r2, #18
 8001e6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	1c5a      	adds	r2, r3, #1
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	62da      	str	r2, [r3, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	1c5a      	adds	r2, r3, #1
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	629a      	str	r2, [r3, #40]	@ 0x28
      hqspi->pTxBuffPtr = pData;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	68ba      	ldr	r2, [r7, #8]
 8001e8e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	695a      	ldr	r2, [r3, #20]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8001e9e:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8001ea0:	e01b      	b.n	8001eda <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	9300      	str	r3, [sp, #0]
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	2104      	movs	r1, #4
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f000 f975 	bl	800219c <QSPI_WaitFlagStateUntilTimeout>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8001eb6:	7ffb      	ldrb	r3, [r7, #31]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d113      	bne.n	8001ee4 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec0:	781a      	ldrb	r2, [r3, #0]
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eca:	1c5a      	adds	r2, r3, #1
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	625a      	str	r2, [r3, #36]	@ 0x24
        hqspi->TxXferCount--;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed4:	1e5a      	subs	r2, r3, #1
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	62da      	str	r2, [r3, #44]	@ 0x2c
      while(hqspi->TxXferCount > 0U)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1df      	bne.n	8001ea2 <HAL_QSPI_Transmit+0x86>
 8001ee2:	e000      	b.n	8001ee6 <HAL_QSPI_Transmit+0xca>
          break;
 8001ee4:	bf00      	nop
      }

      if (status == HAL_OK)
 8001ee6:	7ffb      	ldrb	r3, [r7, #31]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d115      	bne.n	8001f18 <HAL_QSPI_Transmit+0xfc>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	2102      	movs	r1, #2
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	f000 f950 	bl	800219c <QSPI_WaitFlagStateUntilTimeout>
 8001efc:	4603      	mov	r3, r0
 8001efe:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8001f00:	7ffb      	ldrb	r3, [r7, #31]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d108      	bne.n	8001f18 <HAL_QSPI_Transmit+0xfc>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Clear Busy bit */
          status = HAL_QSPI_Abort(hqspi);
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f000 f8bd 	bl	800208e <HAL_QSPI_Abort>
 8001f14:	4603      	mov	r3, r0
 8001f16:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001f20:	e00a      	b.n	8001f38 <HAL_QSPI_Transmit+0x11c>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f26:	f043 0208 	orr.w	r2, r3, #8
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	77fb      	strb	r3, [r7, #31]
 8001f32:	e001      	b.n	8001f38 <HAL_QSPI_Transmit+0x11c>
    }
  }
  else
  {
    status = HAL_BUSY;
 8001f34:	2302      	movs	r3, #2
 8001f36:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return status;
 8001f40:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3720      	adds	r7, #32
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b08a      	sub	sp, #40	@ 0x28
 8001f4e:	af02      	add	r7, sp, #8
 8001f50:	60f8      	str	r0, [r7, #12]
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f56:	2300      	movs	r3, #0
 8001f58:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8001f5a:	f7ff fae9 	bl	8001530 <HAL_GetTick>
 8001f5e:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	3320      	adds	r3, #32
 8001f6e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d101      	bne.n	8001f80 <HAL_QSPI_Receive+0x36>
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	e082      	b.n	8002086 <HAL_QSPI_Receive+0x13c>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d171      	bne.n	8002078 <HAL_QSPI_Receive+0x12e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2200      	movs	r2, #0
 8001f98:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d062      	beq.n	8002066 <HAL_QSPI_Receive+0x11c>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2222      	movs	r2, #34	@ 0x22
 8001fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	1c5a      	adds	r2, r3, #1
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	639a      	str	r2, [r3, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	1c5a      	adds	r2, r3, #1
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	635a      	str	r2, [r3, #52]	@ 0x34
      hqspi->pRxBuffPtr = pData;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	68ba      	ldr	r2, [r7, #8]
 8001fc4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	695b      	ldr	r3, [r3, #20]
 8001fcc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001fd8:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8001fe2:	e01c      	b.n	800201e <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	2201      	movs	r2, #1
 8001fec:	2106      	movs	r1, #6
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f000 f8d4 	bl	800219c <QSPI_WaitFlagStateUntilTimeout>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8001ff8:	7ffb      	ldrb	r3, [r7, #31]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d114      	bne.n	8002028 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	7812      	ldrb	r2, [r2, #0]
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200e:	1c5a      	adds	r2, r3, #1
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	631a      	str	r2, [r3, #48]	@ 0x30
        hqspi->RxXferCount--;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002018:	1e5a      	subs	r2, r3, #1
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	639a      	str	r2, [r3, #56]	@ 0x38
      while(hqspi->RxXferCount > 0U)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1de      	bne.n	8001fe4 <HAL_QSPI_Receive+0x9a>
 8002026:	e000      	b.n	800202a <HAL_QSPI_Receive+0xe0>
          break;
 8002028:	bf00      	nop
      }

      if (status == HAL_OK)
 800202a:	7ffb      	ldrb	r3, [r7, #31]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d115      	bne.n	800205c <HAL_QSPI_Receive+0x112>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	2201      	movs	r2, #1
 8002038:	2102      	movs	r1, #2
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f000 f8ae 	bl	800219c <QSPI_WaitFlagStateUntilTimeout>
 8002040:	4603      	mov	r3, r0
 8002042:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8002044:	7ffb      	ldrb	r3, [r7, #31]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d108      	bne.n	800205c <HAL_QSPI_Receive+0x112>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2202      	movs	r2, #2
 8002050:	60da      	str	r2, [r3, #12]

#if  defined(QSPI1_V1_0)
          /* Workaround - Extra data written in the FIFO at the end of a read transfer */
          status = HAL_QSPI_Abort(hqspi);
 8002052:	68f8      	ldr	r0, [r7, #12]
 8002054:	f000 f81b 	bl	800208e <HAL_QSPI_Abort>
 8002058:	4603      	mov	r3, r0
 800205a:	77fb      	strb	r3, [r7, #31]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002064:	e00a      	b.n	800207c <HAL_QSPI_Receive+0x132>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800206a:	f043 0208 	orr.w	r2, r3, #8
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	77fb      	strb	r3, [r7, #31]
 8002076:	e001      	b.n	800207c <HAL_QSPI_Receive+0x132>
    }
  }
  else
  {
    status = HAL_BUSY;
 8002078:	2302      	movs	r3, #2
 800207a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return status;
 8002084:	7ffb      	ldrb	r3, [r7, #31]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3720      	adds	r7, #32
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b086      	sub	sp, #24
 8002092:	af02      	add	r7, sp, #8
 8002094:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800209a:	f7ff fa49 	bl	8001530 <HAL_GetTick>
 800209e:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d062      	beq.n	8002176 <HAL_QSPI_Abort+0xe8>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0304 	and.w	r3, r3, #4
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d017      	beq.n	80020f6 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 0204 	bic.w	r2, r2, #4
 80020d4:	601a      	str	r2, [r3, #0]

      /* Abort DMA channel */
      status = HAL_DMA_Abort(hqspi->hdma);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff fb3d 	bl	800175a <HAL_DMA_Abort>
 80020e0:	4603      	mov	r3, r0
 80020e2:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
 80020e4:	7bfb      	ldrb	r3, [r7, #15]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d005      	beq.n	80020f6 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ee:	f043 0204 	orr.w	r2, r3, #4
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    if (__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_BUSY) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f003 0320 	and.w	r3, r3, #32
 8002100:	2b00      	cmp	r3, #0
 8002102:	d034      	beq.n	800216e <HAL_QSPI_Abort+0xe0>
    {
      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f042 0202 	orr.w	r2, r2, #2
 8002112:	601a      	str	r2, [r3, #0]
      
      /* Wait until TC flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	2201      	movs	r2, #1
 800211e:	2102      	movs	r1, #2
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f000 f83b 	bl	800219c <QSPI_WaitFlagStateUntilTimeout>
 8002126:	4603      	mov	r3, r0
 8002128:	73fb      	strb	r3, [r7, #15]
      
      if (status == HAL_OK)
 800212a:	7bfb      	ldrb	r3, [r7, #15]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d10e      	bne.n	800214e <HAL_QSPI_Abort+0xc0>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2202      	movs	r2, #2
 8002136:	60da      	str	r2, [r3, #12]
        
        /* Wait until BUSY flag is reset */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	2200      	movs	r2, #0
 8002142:	2120      	movs	r1, #32
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 f829 	bl	800219c <QSPI_WaitFlagStateUntilTimeout>
 800214a:	4603      	mov	r3, r0
 800214c:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 800214e:	7bfb      	ldrb	r3, [r7, #15]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d110      	bne.n	8002176 <HAL_QSPI_Abort+0xe8>
      {
        /* Reset functional mode configuration to indirect write mode by default */
        CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	695a      	ldr	r2, [r3, #20]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8002162:	615a      	str	r2, [r3, #20]
        
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800216c:	e003      	b.n	8002176 <HAL_QSPI_Abort+0xe8>
      }
    }
    else
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    }
  }

  return status;
 8002176:	7bfb      	ldrb	r3, [r7, #15]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	603b      	str	r3, [r7, #0]
 80021a8:	4613      	mov	r3, r2
 80021aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80021ac:	e01a      	b.n	80021e4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b4:	d016      	beq.n	80021e4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021b6:	f7ff f9bb 	bl	8001530 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d302      	bcc.n	80021cc <QSPI_WaitFlagStateUntilTimeout+0x30>
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d10b      	bne.n	80021e4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2204      	movs	r2, #4
 80021d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d8:	f043 0201 	orr.w	r2, r3, #1
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e00e      	b.n	8002202 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	4013      	ands	r3, r2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	bf14      	ite	ne
 80021f2:	2301      	movne	r3, #1
 80021f4:	2300      	moveq	r3, #0
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	461a      	mov	r2, r3
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d1d6      	bne.n	80021ae <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800220a:	b480      	push	{r7}
 800220c:	b085      	sub	sp, #20
 800220e:	af00      	add	r7, sp, #0
 8002210:	60f8      	str	r0, [r7, #12]
 8002212:	60b9      	str	r1, [r7, #8]
 8002214:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800221a:	2b00      	cmp	r3, #0
 800221c:	d009      	beq.n	8002232 <QSPI_Config+0x28>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8002224:	d005      	beq.n	8002232 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	3a01      	subs	r2, #1
 8002230:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	2b00      	cmp	r3, #0
 8002238:	f000 80b9 	beq.w	80023ae <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d05f      	beq.n	8002304 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68ba      	ldr	r2, [r7, #8]
 800224a:	6892      	ldr	r2, [r2, #8]
 800224c:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d031      	beq.n	80022ba <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225e:	431a      	orrs	r2, r3
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002264:	431a      	orrs	r2, r3
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226a:	431a      	orrs	r2, r3
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	049b      	lsls	r3, r3, #18
 8002272:	431a      	orrs	r2, r3
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	431a      	orrs	r2, r3
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	431a      	orrs	r2, r3
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	431a      	orrs	r2, r3
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	431a      	orrs	r2, r3
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	431a      	orrs	r2, r3
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	ea42 0103 	orr.w	r1, r2, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80022aa:	f000 812e 	beq.w	800250a <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68ba      	ldr	r2, [r7, #8]
 80022b4:	6852      	ldr	r2, [r2, #4]
 80022b6:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80022b8:	e127      	b.n	800250a <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c2:	431a      	orrs	r2, r3
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022c8:	431a      	orrs	r2, r3
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ce:	431a      	orrs	r2, r3
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	695b      	ldr	r3, [r3, #20]
 80022d4:	049b      	lsls	r3, r3, #18
 80022d6:	431a      	orrs	r2, r3
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	431a      	orrs	r2, r3
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	431a      	orrs	r2, r3
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	69db      	ldr	r3, [r3, #28]
 80022e8:	431a      	orrs	r2, r3
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	431a      	orrs	r2, r3
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	ea42 0103 	orr.w	r1, r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	430a      	orrs	r2, r1
 8002300:	615a      	str	r2, [r3, #20]
}
 8002302:	e102      	b.n	800250a <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	69db      	ldr	r3, [r3, #28]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d02e      	beq.n	800236a <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002314:	431a      	orrs	r2, r3
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800231a:	431a      	orrs	r2, r3
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002320:	431a      	orrs	r2, r3
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	049b      	lsls	r3, r3, #18
 8002328:	431a      	orrs	r2, r3
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	431a      	orrs	r2, r3
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	431a      	orrs	r2, r3
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	431a      	orrs	r2, r3
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	431a      	orrs	r2, r3
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	ea42 0103 	orr.w	r1, r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	430a      	orrs	r2, r1
 8002352:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800235a:	f000 80d6 	beq.w	800250a <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	6852      	ldr	r2, [r2, #4]
 8002366:	619a      	str	r2, [r3, #24]
}
 8002368:	e0cf      	b.n	800250a <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002372:	431a      	orrs	r2, r3
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002378:	431a      	orrs	r2, r3
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237e:	431a      	orrs	r2, r3
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	049b      	lsls	r3, r3, #18
 8002386:	431a      	orrs	r2, r3
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	431a      	orrs	r2, r3
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	431a      	orrs	r2, r3
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	431a      	orrs	r2, r3
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	ea42 0103 	orr.w	r1, r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	430a      	orrs	r2, r1
 80023aa:	615a      	str	r2, [r3, #20]
}
 80023ac:	e0ad      	b.n	800250a <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d058      	beq.n	8002468 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	6892      	ldr	r2, [r2, #8]
 80023be:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	69db      	ldr	r3, [r3, #28]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d02d      	beq.n	8002424 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d0:	431a      	orrs	r2, r3
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023d6:	431a      	orrs	r2, r3
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023dc:	431a      	orrs	r2, r3
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	049b      	lsls	r3, r3, #18
 80023e4:	431a      	orrs	r2, r3
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	431a      	orrs	r2, r3
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	431a      	orrs	r2, r3
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	431a      	orrs	r2, r3
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	69db      	ldr	r3, [r3, #28]
 80023fc:	431a      	orrs	r2, r3
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	ea42 0103 	orr.w	r1, r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	430a      	orrs	r2, r1
 800240e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8002416:	d078      	beq.n	800250a <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68ba      	ldr	r2, [r7, #8]
 800241e:	6852      	ldr	r2, [r2, #4]
 8002420:	619a      	str	r2, [r3, #24]
}
 8002422:	e072      	b.n	800250a <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242c:	431a      	orrs	r2, r3
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002432:	431a      	orrs	r2, r3
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002438:	431a      	orrs	r2, r3
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	049b      	lsls	r3, r3, #18
 8002440:	431a      	orrs	r2, r3
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	431a      	orrs	r2, r3
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	431a      	orrs	r2, r3
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	431a      	orrs	r2, r3
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	ea42 0103 	orr.w	r1, r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	430a      	orrs	r2, r1
 8002464:	615a      	str	r2, [r3, #20]
}
 8002466:	e050      	b.n	800250a <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	69db      	ldr	r3, [r3, #28]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d02a      	beq.n	80024c6 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002478:	431a      	orrs	r2, r3
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800247e:	431a      	orrs	r2, r3
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002484:	431a      	orrs	r2, r3
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	049b      	lsls	r3, r3, #18
 800248c:	431a      	orrs	r2, r3
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	431a      	orrs	r2, r3
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	431a      	orrs	r2, r3
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	431a      	orrs	r2, r3
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	ea42 0103 	orr.w	r1, r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80024b8:	d027      	beq.n	800250a <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68ba      	ldr	r2, [r7, #8]
 80024c0:	6852      	ldr	r2, [r2, #4]
 80024c2:	619a      	str	r2, [r3, #24]
}
 80024c4:	e021      	b.n	800250a <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d01d      	beq.n	800250a <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d6:	431a      	orrs	r2, r3
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024dc:	431a      	orrs	r2, r3
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e2:	431a      	orrs	r2, r3
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	049b      	lsls	r3, r3, #18
 80024ea:	431a      	orrs	r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	431a      	orrs	r2, r3
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	431a      	orrs	r2, r3
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	ea42 0103 	orr.w	r1, r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	430a      	orrs	r2, r1
 8002508:	615a      	str	r2, [r3, #20]
}
 800250a:	bf00      	nop
 800250c:	3714      	adds	r7, #20
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
	...

08002518 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002520:	2300      	movs	r3, #0
 8002522:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e291      	b.n	8002a52 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	f000 8087 	beq.w	800264a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800253c:	4b96      	ldr	r3, [pc, #600]	@ (8002798 <HAL_RCC_OscConfig+0x280>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 030c 	and.w	r3, r3, #12
 8002544:	2b04      	cmp	r3, #4
 8002546:	d00c      	beq.n	8002562 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002548:	4b93      	ldr	r3, [pc, #588]	@ (8002798 <HAL_RCC_OscConfig+0x280>)
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f003 030c 	and.w	r3, r3, #12
 8002550:	2b08      	cmp	r3, #8
 8002552:	d112      	bne.n	800257a <HAL_RCC_OscConfig+0x62>
 8002554:	4b90      	ldr	r3, [pc, #576]	@ (8002798 <HAL_RCC_OscConfig+0x280>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800255c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002560:	d10b      	bne.n	800257a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002562:	4b8d      	ldr	r3, [pc, #564]	@ (8002798 <HAL_RCC_OscConfig+0x280>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d06c      	beq.n	8002648 <HAL_RCC_OscConfig+0x130>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d168      	bne.n	8002648 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e26b      	b.n	8002a52 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002582:	d106      	bne.n	8002592 <HAL_RCC_OscConfig+0x7a>
 8002584:	4b84      	ldr	r3, [pc, #528]	@ (8002798 <HAL_RCC_OscConfig+0x280>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a83      	ldr	r2, [pc, #524]	@ (8002798 <HAL_RCC_OscConfig+0x280>)
 800258a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800258e:	6013      	str	r3, [r2, #0]
 8002590:	e02e      	b.n	80025f0 <HAL_RCC_OscConfig+0xd8>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10c      	bne.n	80025b4 <HAL_RCC_OscConfig+0x9c>
 800259a:	4b7f      	ldr	r3, [pc, #508]	@ (8002798 <HAL_RCC_OscConfig+0x280>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a7e      	ldr	r2, [pc, #504]	@ (8002798 <HAL_RCC_OscConfig+0x280>)
 80025a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	4b7c      	ldr	r3, [pc, #496]	@ (8002798 <HAL_RCC_OscConfig+0x280>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a7b      	ldr	r2, [pc, #492]	@ (8002798 <HAL_RCC_OscConfig+0x280>)
 80025ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025b0:	6013      	str	r3, [r2, #0]
 80025b2:	e01d      	b.n	80025f0 <HAL_RCC_OscConfig+0xd8>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025bc:	d10c      	bne.n	80025d8 <HAL_RCC_OscConfig+0xc0>
 80025be:	4b76      	ldr	r3, [pc, #472]	@ (8002798 <HAL_RCC_OscConfig+0x280>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a75      	ldr	r2, [pc, #468]	@ (8002798 <HAL_RCC_OscConfig+0x280>)
 80025c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025c8:	6013      	str	r3, [r2, #0]
 80025ca:	4b73      	ldr	r3, [pc, #460]	@ (8002798 <HAL_RCC_OscConfig+0x280>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a72      	ldr	r2, [pc, #456]	@ (8002798 <HAL_RCC_OscConfig+0x280>)
 80025d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	e00b      	b.n	80025f0 <HAL_RCC_OscConfig+0xd8>
 80025d8:	4b6f      	ldr	r3, [pc, #444]	@ (8002798 <HAL_RCC_OscConfig+0x280>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a6e      	ldr	r2, [pc, #440]	@ (8002798 <HAL_RCC_OscConfig+0x280>)
 80025de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025e2:	6013      	str	r3, [r2, #0]
 80025e4:	4b6c      	ldr	r3, [pc, #432]	@ (8002798 <HAL_RCC_OscConfig+0x280>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a6b      	ldr	r2, [pc, #428]	@ (8002798 <HAL_RCC_OscConfig+0x280>)
 80025ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d013      	beq.n	8002620 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f8:	f7fe ff9a 	bl	8001530 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002600:	f7fe ff96 	bl	8001530 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b64      	cmp	r3, #100	@ 0x64
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e21f      	b.n	8002a52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002612:	4b61      	ldr	r3, [pc, #388]	@ (8002798 <HAL_RCC_OscConfig+0x280>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0f0      	beq.n	8002600 <HAL_RCC_OscConfig+0xe8>
 800261e:	e014      	b.n	800264a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002620:	f7fe ff86 	bl	8001530 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002628:	f7fe ff82 	bl	8001530 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b64      	cmp	r3, #100	@ 0x64
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e20b      	b.n	8002a52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800263a:	4b57      	ldr	r3, [pc, #348]	@ (8002798 <HAL_RCC_OscConfig+0x280>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1f0      	bne.n	8002628 <HAL_RCC_OscConfig+0x110>
 8002646:	e000      	b.n	800264a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002648:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d069      	beq.n	800272a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002656:	4b50      	ldr	r3, [pc, #320]	@ (8002798 <HAL_RCC_OscConfig+0x280>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f003 030c 	and.w	r3, r3, #12
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00b      	beq.n	800267a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002662:	4b4d      	ldr	r3, [pc, #308]	@ (8002798 <HAL_RCC_OscConfig+0x280>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 030c 	and.w	r3, r3, #12
 800266a:	2b08      	cmp	r3, #8
 800266c:	d11c      	bne.n	80026a8 <HAL_RCC_OscConfig+0x190>
 800266e:	4b4a      	ldr	r3, [pc, #296]	@ (8002798 <HAL_RCC_OscConfig+0x280>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d116      	bne.n	80026a8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800267a:	4b47      	ldr	r3, [pc, #284]	@ (8002798 <HAL_RCC_OscConfig+0x280>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d005      	beq.n	8002692 <HAL_RCC_OscConfig+0x17a>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d001      	beq.n	8002692 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e1df      	b.n	8002a52 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002692:	4b41      	ldr	r3, [pc, #260]	@ (8002798 <HAL_RCC_OscConfig+0x280>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	493d      	ldr	r1, [pc, #244]	@ (8002798 <HAL_RCC_OscConfig+0x280>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026a6:	e040      	b.n	800272a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d023      	beq.n	80026f8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026b0:	4b39      	ldr	r3, [pc, #228]	@ (8002798 <HAL_RCC_OscConfig+0x280>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a38      	ldr	r2, [pc, #224]	@ (8002798 <HAL_RCC_OscConfig+0x280>)
 80026b6:	f043 0301 	orr.w	r3, r3, #1
 80026ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026bc:	f7fe ff38 	bl	8001530 <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026c4:	f7fe ff34 	bl	8001530 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e1bd      	b.n	8002a52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d6:	4b30      	ldr	r3, [pc, #192]	@ (8002798 <HAL_RCC_OscConfig+0x280>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d0f0      	beq.n	80026c4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e2:	4b2d      	ldr	r3, [pc, #180]	@ (8002798 <HAL_RCC_OscConfig+0x280>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	4929      	ldr	r1, [pc, #164]	@ (8002798 <HAL_RCC_OscConfig+0x280>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	600b      	str	r3, [r1, #0]
 80026f6:	e018      	b.n	800272a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026f8:	4b27      	ldr	r3, [pc, #156]	@ (8002798 <HAL_RCC_OscConfig+0x280>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a26      	ldr	r2, [pc, #152]	@ (8002798 <HAL_RCC_OscConfig+0x280>)
 80026fe:	f023 0301 	bic.w	r3, r3, #1
 8002702:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002704:	f7fe ff14 	bl	8001530 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800270c:	f7fe ff10 	bl	8001530 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e199      	b.n	8002a52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800271e:	4b1e      	ldr	r3, [pc, #120]	@ (8002798 <HAL_RCC_OscConfig+0x280>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1f0      	bne.n	800270c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	2b00      	cmp	r3, #0
 8002734:	d038      	beq.n	80027a8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d019      	beq.n	8002772 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800273e:	4b16      	ldr	r3, [pc, #88]	@ (8002798 <HAL_RCC_OscConfig+0x280>)
 8002740:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002742:	4a15      	ldr	r2, [pc, #84]	@ (8002798 <HAL_RCC_OscConfig+0x280>)
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800274a:	f7fe fef1 	bl	8001530 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002752:	f7fe feed 	bl	8001530 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e176      	b.n	8002a52 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002764:	4b0c      	ldr	r3, [pc, #48]	@ (8002798 <HAL_RCC_OscConfig+0x280>)
 8002766:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0f0      	beq.n	8002752 <HAL_RCC_OscConfig+0x23a>
 8002770:	e01a      	b.n	80027a8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002772:	4b09      	ldr	r3, [pc, #36]	@ (8002798 <HAL_RCC_OscConfig+0x280>)
 8002774:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002776:	4a08      	ldr	r2, [pc, #32]	@ (8002798 <HAL_RCC_OscConfig+0x280>)
 8002778:	f023 0301 	bic.w	r3, r3, #1
 800277c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277e:	f7fe fed7 	bl	8001530 <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002784:	e00a      	b.n	800279c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002786:	f7fe fed3 	bl	8001530 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d903      	bls.n	800279c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e15c      	b.n	8002a52 <HAL_RCC_OscConfig+0x53a>
 8002798:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800279c:	4b91      	ldr	r3, [pc, #580]	@ (80029e4 <HAL_RCC_OscConfig+0x4cc>)
 800279e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1ee      	bne.n	8002786 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0304 	and.w	r3, r3, #4
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 80a4 	beq.w	80028fe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027b6:	4b8b      	ldr	r3, [pc, #556]	@ (80029e4 <HAL_RCC_OscConfig+0x4cc>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10d      	bne.n	80027de <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80027c2:	4b88      	ldr	r3, [pc, #544]	@ (80029e4 <HAL_RCC_OscConfig+0x4cc>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c6:	4a87      	ldr	r2, [pc, #540]	@ (80029e4 <HAL_RCC_OscConfig+0x4cc>)
 80027c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80027ce:	4b85      	ldr	r3, [pc, #532]	@ (80029e4 <HAL_RCC_OscConfig+0x4cc>)
 80027d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027d6:	60bb      	str	r3, [r7, #8]
 80027d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027da:	2301      	movs	r3, #1
 80027dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027de:	4b82      	ldr	r3, [pc, #520]	@ (80029e8 <HAL_RCC_OscConfig+0x4d0>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d118      	bne.n	800281c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80027ea:	4b7f      	ldr	r3, [pc, #508]	@ (80029e8 <HAL_RCC_OscConfig+0x4d0>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a7e      	ldr	r2, [pc, #504]	@ (80029e8 <HAL_RCC_OscConfig+0x4d0>)
 80027f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027f6:	f7fe fe9b 	bl	8001530 <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027fc:	e008      	b.n	8002810 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027fe:	f7fe fe97 	bl	8001530 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b64      	cmp	r3, #100	@ 0x64
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e120      	b.n	8002a52 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002810:	4b75      	ldr	r3, [pc, #468]	@ (80029e8 <HAL_RCC_OscConfig+0x4d0>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002818:	2b00      	cmp	r3, #0
 800281a:	d0f0      	beq.n	80027fe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d106      	bne.n	8002832 <HAL_RCC_OscConfig+0x31a>
 8002824:	4b6f      	ldr	r3, [pc, #444]	@ (80029e4 <HAL_RCC_OscConfig+0x4cc>)
 8002826:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002828:	4a6e      	ldr	r2, [pc, #440]	@ (80029e4 <HAL_RCC_OscConfig+0x4cc>)
 800282a:	f043 0301 	orr.w	r3, r3, #1
 800282e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002830:	e02d      	b.n	800288e <HAL_RCC_OscConfig+0x376>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10c      	bne.n	8002854 <HAL_RCC_OscConfig+0x33c>
 800283a:	4b6a      	ldr	r3, [pc, #424]	@ (80029e4 <HAL_RCC_OscConfig+0x4cc>)
 800283c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800283e:	4a69      	ldr	r2, [pc, #420]	@ (80029e4 <HAL_RCC_OscConfig+0x4cc>)
 8002840:	f023 0301 	bic.w	r3, r3, #1
 8002844:	6713      	str	r3, [r2, #112]	@ 0x70
 8002846:	4b67      	ldr	r3, [pc, #412]	@ (80029e4 <HAL_RCC_OscConfig+0x4cc>)
 8002848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800284a:	4a66      	ldr	r2, [pc, #408]	@ (80029e4 <HAL_RCC_OscConfig+0x4cc>)
 800284c:	f023 0304 	bic.w	r3, r3, #4
 8002850:	6713      	str	r3, [r2, #112]	@ 0x70
 8002852:	e01c      	b.n	800288e <HAL_RCC_OscConfig+0x376>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	2b05      	cmp	r3, #5
 800285a:	d10c      	bne.n	8002876 <HAL_RCC_OscConfig+0x35e>
 800285c:	4b61      	ldr	r3, [pc, #388]	@ (80029e4 <HAL_RCC_OscConfig+0x4cc>)
 800285e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002860:	4a60      	ldr	r2, [pc, #384]	@ (80029e4 <HAL_RCC_OscConfig+0x4cc>)
 8002862:	f043 0304 	orr.w	r3, r3, #4
 8002866:	6713      	str	r3, [r2, #112]	@ 0x70
 8002868:	4b5e      	ldr	r3, [pc, #376]	@ (80029e4 <HAL_RCC_OscConfig+0x4cc>)
 800286a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800286c:	4a5d      	ldr	r2, [pc, #372]	@ (80029e4 <HAL_RCC_OscConfig+0x4cc>)
 800286e:	f043 0301 	orr.w	r3, r3, #1
 8002872:	6713      	str	r3, [r2, #112]	@ 0x70
 8002874:	e00b      	b.n	800288e <HAL_RCC_OscConfig+0x376>
 8002876:	4b5b      	ldr	r3, [pc, #364]	@ (80029e4 <HAL_RCC_OscConfig+0x4cc>)
 8002878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800287a:	4a5a      	ldr	r2, [pc, #360]	@ (80029e4 <HAL_RCC_OscConfig+0x4cc>)
 800287c:	f023 0301 	bic.w	r3, r3, #1
 8002880:	6713      	str	r3, [r2, #112]	@ 0x70
 8002882:	4b58      	ldr	r3, [pc, #352]	@ (80029e4 <HAL_RCC_OscConfig+0x4cc>)
 8002884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002886:	4a57      	ldr	r2, [pc, #348]	@ (80029e4 <HAL_RCC_OscConfig+0x4cc>)
 8002888:	f023 0304 	bic.w	r3, r3, #4
 800288c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d015      	beq.n	80028c2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002896:	f7fe fe4b 	bl	8001530 <HAL_GetTick>
 800289a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800289c:	e00a      	b.n	80028b4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800289e:	f7fe fe47 	bl	8001530 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e0ce      	b.n	8002a52 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b4:	4b4b      	ldr	r3, [pc, #300]	@ (80029e4 <HAL_RCC_OscConfig+0x4cc>)
 80028b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d0ee      	beq.n	800289e <HAL_RCC_OscConfig+0x386>
 80028c0:	e014      	b.n	80028ec <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c2:	f7fe fe35 	bl	8001530 <HAL_GetTick>
 80028c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c8:	e00a      	b.n	80028e0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ca:	f7fe fe31 	bl	8001530 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028d8:	4293      	cmp	r3, r2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e0b8      	b.n	8002a52 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028e0:	4b40      	ldr	r3, [pc, #256]	@ (80029e4 <HAL_RCC_OscConfig+0x4cc>)
 80028e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1ee      	bne.n	80028ca <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028ec:	7dfb      	ldrb	r3, [r7, #23]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d105      	bne.n	80028fe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028f2:	4b3c      	ldr	r3, [pc, #240]	@ (80029e4 <HAL_RCC_OscConfig+0x4cc>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f6:	4a3b      	ldr	r2, [pc, #236]	@ (80029e4 <HAL_RCC_OscConfig+0x4cc>)
 80028f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028fc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	2b00      	cmp	r3, #0
 8002904:	f000 80a4 	beq.w	8002a50 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002908:	4b36      	ldr	r3, [pc, #216]	@ (80029e4 <HAL_RCC_OscConfig+0x4cc>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f003 030c 	and.w	r3, r3, #12
 8002910:	2b08      	cmp	r3, #8
 8002912:	d06b      	beq.n	80029ec <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	2b02      	cmp	r3, #2
 800291a:	d149      	bne.n	80029b0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800291c:	4b31      	ldr	r3, [pc, #196]	@ (80029e4 <HAL_RCC_OscConfig+0x4cc>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a30      	ldr	r2, [pc, #192]	@ (80029e4 <HAL_RCC_OscConfig+0x4cc>)
 8002922:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002926:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002928:	f7fe fe02 	bl	8001530 <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002930:	f7fe fdfe 	bl	8001530 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e087      	b.n	8002a52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002942:	4b28      	ldr	r3, [pc, #160]	@ (80029e4 <HAL_RCC_OscConfig+0x4cc>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f0      	bne.n	8002930 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	69da      	ldr	r2, [r3, #28]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	431a      	orrs	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295c:	019b      	lsls	r3, r3, #6
 800295e:	431a      	orrs	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002964:	085b      	lsrs	r3, r3, #1
 8002966:	3b01      	subs	r3, #1
 8002968:	041b      	lsls	r3, r3, #16
 800296a:	431a      	orrs	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002970:	061b      	lsls	r3, r3, #24
 8002972:	4313      	orrs	r3, r2
 8002974:	4a1b      	ldr	r2, [pc, #108]	@ (80029e4 <HAL_RCC_OscConfig+0x4cc>)
 8002976:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800297a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800297c:	4b19      	ldr	r3, [pc, #100]	@ (80029e4 <HAL_RCC_OscConfig+0x4cc>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a18      	ldr	r2, [pc, #96]	@ (80029e4 <HAL_RCC_OscConfig+0x4cc>)
 8002982:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002986:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002988:	f7fe fdd2 	bl	8001530 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002990:	f7fe fdce 	bl	8001530 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e057      	b.n	8002a52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a2:	4b10      	ldr	r3, [pc, #64]	@ (80029e4 <HAL_RCC_OscConfig+0x4cc>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d0f0      	beq.n	8002990 <HAL_RCC_OscConfig+0x478>
 80029ae:	e04f      	b.n	8002a50 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029b0:	4b0c      	ldr	r3, [pc, #48]	@ (80029e4 <HAL_RCC_OscConfig+0x4cc>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a0b      	ldr	r2, [pc, #44]	@ (80029e4 <HAL_RCC_OscConfig+0x4cc>)
 80029b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029bc:	f7fe fdb8 	bl	8001530 <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c4:	f7fe fdb4 	bl	8001530 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e03d      	b.n	8002a52 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029d6:	4b03      	ldr	r3, [pc, #12]	@ (80029e4 <HAL_RCC_OscConfig+0x4cc>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1f0      	bne.n	80029c4 <HAL_RCC_OscConfig+0x4ac>
 80029e2:	e035      	b.n	8002a50 <HAL_RCC_OscConfig+0x538>
 80029e4:	40023800 	.word	0x40023800
 80029e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80029ec:	4b1b      	ldr	r3, [pc, #108]	@ (8002a5c <HAL_RCC_OscConfig+0x544>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d028      	beq.n	8002a4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d121      	bne.n	8002a4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d11a      	bne.n	8002a4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a22:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d111      	bne.n	8002a4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a32:	085b      	lsrs	r3, r3, #1
 8002a34:	3b01      	subs	r3, #1
 8002a36:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d107      	bne.n	8002a4c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a46:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d001      	beq.n	8002a50 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e000      	b.n	8002a52 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40023800 	.word	0x40023800

08002a60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e0d0      	b.n	8002c1a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a78:	4b6a      	ldr	r3, [pc, #424]	@ (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 030f 	and.w	r3, r3, #15
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d910      	bls.n	8002aa8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a86:	4b67      	ldr	r3, [pc, #412]	@ (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f023 020f 	bic.w	r2, r3, #15
 8002a8e:	4965      	ldr	r1, [pc, #404]	@ (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a96:	4b63      	ldr	r3, [pc, #396]	@ (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d001      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e0b8      	b.n	8002c1a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d020      	beq.n	8002af6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d005      	beq.n	8002acc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ac0:	4b59      	ldr	r3, [pc, #356]	@ (8002c28 <HAL_RCC_ClockConfig+0x1c8>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	4a58      	ldr	r2, [pc, #352]	@ (8002c28 <HAL_RCC_ClockConfig+0x1c8>)
 8002ac6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002aca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0308 	and.w	r3, r3, #8
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d005      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ad8:	4b53      	ldr	r3, [pc, #332]	@ (8002c28 <HAL_RCC_ClockConfig+0x1c8>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	4a52      	ldr	r2, [pc, #328]	@ (8002c28 <HAL_RCC_ClockConfig+0x1c8>)
 8002ade:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ae2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ae4:	4b50      	ldr	r3, [pc, #320]	@ (8002c28 <HAL_RCC_ClockConfig+0x1c8>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	494d      	ldr	r1, [pc, #308]	@ (8002c28 <HAL_RCC_ClockConfig+0x1c8>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d040      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d107      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0a:	4b47      	ldr	r3, [pc, #284]	@ (8002c28 <HAL_RCC_ClockConfig+0x1c8>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d115      	bne.n	8002b42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e07f      	b.n	8002c1a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d107      	bne.n	8002b32 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b22:	4b41      	ldr	r3, [pc, #260]	@ (8002c28 <HAL_RCC_ClockConfig+0x1c8>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d109      	bne.n	8002b42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e073      	b.n	8002c1a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b32:	4b3d      	ldr	r3, [pc, #244]	@ (8002c28 <HAL_RCC_ClockConfig+0x1c8>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e06b      	b.n	8002c1a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b42:	4b39      	ldr	r3, [pc, #228]	@ (8002c28 <HAL_RCC_ClockConfig+0x1c8>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f023 0203 	bic.w	r2, r3, #3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	4936      	ldr	r1, [pc, #216]	@ (8002c28 <HAL_RCC_ClockConfig+0x1c8>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b54:	f7fe fcec 	bl	8001530 <HAL_GetTick>
 8002b58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b5a:	e00a      	b.n	8002b72 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b5c:	f7fe fce8 	bl	8001530 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e053      	b.n	8002c1a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b72:	4b2d      	ldr	r3, [pc, #180]	@ (8002c28 <HAL_RCC_ClockConfig+0x1c8>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 020c 	and.w	r2, r3, #12
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d1eb      	bne.n	8002b5c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b84:	4b27      	ldr	r3, [pc, #156]	@ (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 030f 	and.w	r3, r3, #15
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d210      	bcs.n	8002bb4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b92:	4b24      	ldr	r3, [pc, #144]	@ (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f023 020f 	bic.w	r2, r3, #15
 8002b9a:	4922      	ldr	r1, [pc, #136]	@ (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ba2:	4b20      	ldr	r3, [pc, #128]	@ (8002c24 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 030f 	and.w	r3, r3, #15
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d001      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e032      	b.n	8002c1a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d008      	beq.n	8002bd2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bc0:	4b19      	ldr	r3, [pc, #100]	@ (8002c28 <HAL_RCC_ClockConfig+0x1c8>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	4916      	ldr	r1, [pc, #88]	@ (8002c28 <HAL_RCC_ClockConfig+0x1c8>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0308 	and.w	r3, r3, #8
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d009      	beq.n	8002bf2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bde:	4b12      	ldr	r3, [pc, #72]	@ (8002c28 <HAL_RCC_ClockConfig+0x1c8>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	490e      	ldr	r1, [pc, #56]	@ (8002c28 <HAL_RCC_ClockConfig+0x1c8>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bf2:	f000 f821 	bl	8002c38 <HAL_RCC_GetSysClockFreq>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8002c28 <HAL_RCC_ClockConfig+0x1c8>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	091b      	lsrs	r3, r3, #4
 8002bfe:	f003 030f 	and.w	r3, r3, #15
 8002c02:	490a      	ldr	r1, [pc, #40]	@ (8002c2c <HAL_RCC_ClockConfig+0x1cc>)
 8002c04:	5ccb      	ldrb	r3, [r1, r3]
 8002c06:	fa22 f303 	lsr.w	r3, r2, r3
 8002c0a:	4a09      	ldr	r2, [pc, #36]	@ (8002c30 <HAL_RCC_ClockConfig+0x1d0>)
 8002c0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c0e:	4b09      	ldr	r3, [pc, #36]	@ (8002c34 <HAL_RCC_ClockConfig+0x1d4>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fe fc48 	bl	80014a8 <HAL_InitTick>

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40023c00 	.word	0x40023c00
 8002c28:	40023800 	.word	0x40023800
 8002c2c:	08002e48 	.word	0x08002e48
 8002c30:	20000000 	.word	0x20000000
 8002c34:	20000004 	.word	0x20000004

08002c38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c3c:	b090      	sub	sp, #64	@ 0x40
 8002c3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002c40:	2300      	movs	r3, #0
 8002c42:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c44:	2300      	movs	r3, #0
 8002c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c48:	2300      	movs	r3, #0
 8002c4a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c50:	4b59      	ldr	r3, [pc, #356]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f003 030c 	and.w	r3, r3, #12
 8002c58:	2b08      	cmp	r3, #8
 8002c5a:	d00d      	beq.n	8002c78 <HAL_RCC_GetSysClockFreq+0x40>
 8002c5c:	2b08      	cmp	r3, #8
 8002c5e:	f200 80a1 	bhi.w	8002da4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d002      	beq.n	8002c6c <HAL_RCC_GetSysClockFreq+0x34>
 8002c66:	2b04      	cmp	r3, #4
 8002c68:	d003      	beq.n	8002c72 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c6a:	e09b      	b.n	8002da4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c6c:	4b53      	ldr	r3, [pc, #332]	@ (8002dbc <HAL_RCC_GetSysClockFreq+0x184>)
 8002c6e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c70:	e09b      	b.n	8002daa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c72:	4b53      	ldr	r3, [pc, #332]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c74:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002c76:	e098      	b.n	8002daa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c78:	4b4f      	ldr	r3, [pc, #316]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c80:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002c82:	4b4d      	ldr	r3, [pc, #308]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d028      	beq.n	8002ce0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c8e:	4b4a      	ldr	r3, [pc, #296]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	099b      	lsrs	r3, r3, #6
 8002c94:	2200      	movs	r2, #0
 8002c96:	623b      	str	r3, [r7, #32]
 8002c98:	627a      	str	r2, [r7, #36]	@ 0x24
 8002c9a:	6a3b      	ldr	r3, [r7, #32]
 8002c9c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	4b47      	ldr	r3, [pc, #284]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ca4:	fb03 f201 	mul.w	r2, r3, r1
 8002ca8:	2300      	movs	r3, #0
 8002caa:	fb00 f303 	mul.w	r3, r0, r3
 8002cae:	4413      	add	r3, r2
 8002cb0:	4a43      	ldr	r2, [pc, #268]	@ (8002dc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002cb2:	fba0 1202 	umull	r1, r2, r0, r2
 8002cb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002cb8:	460a      	mov	r2, r1
 8002cba:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002cbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cbe:	4413      	add	r3, r2
 8002cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	61bb      	str	r3, [r7, #24]
 8002cc8:	61fa      	str	r2, [r7, #28]
 8002cca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002cd2:	f7fd fa99 	bl	8000208 <__aeabi_uldivmod>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	4613      	mov	r3, r2
 8002cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cde:	e053      	b.n	8002d88 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ce0:	4b35      	ldr	r3, [pc, #212]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	099b      	lsrs	r3, r3, #6
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	613b      	str	r3, [r7, #16]
 8002cea:	617a      	str	r2, [r7, #20]
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002cf2:	f04f 0b00 	mov.w	fp, #0
 8002cf6:	4652      	mov	r2, sl
 8002cf8:	465b      	mov	r3, fp
 8002cfa:	f04f 0000 	mov.w	r0, #0
 8002cfe:	f04f 0100 	mov.w	r1, #0
 8002d02:	0159      	lsls	r1, r3, #5
 8002d04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d08:	0150      	lsls	r0, r2, #5
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	ebb2 080a 	subs.w	r8, r2, sl
 8002d12:	eb63 090b 	sbc.w	r9, r3, fp
 8002d16:	f04f 0200 	mov.w	r2, #0
 8002d1a:	f04f 0300 	mov.w	r3, #0
 8002d1e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d22:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d26:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d2a:	ebb2 0408 	subs.w	r4, r2, r8
 8002d2e:	eb63 0509 	sbc.w	r5, r3, r9
 8002d32:	f04f 0200 	mov.w	r2, #0
 8002d36:	f04f 0300 	mov.w	r3, #0
 8002d3a:	00eb      	lsls	r3, r5, #3
 8002d3c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d40:	00e2      	lsls	r2, r4, #3
 8002d42:	4614      	mov	r4, r2
 8002d44:	461d      	mov	r5, r3
 8002d46:	eb14 030a 	adds.w	r3, r4, sl
 8002d4a:	603b      	str	r3, [r7, #0]
 8002d4c:	eb45 030b 	adc.w	r3, r5, fp
 8002d50:	607b      	str	r3, [r7, #4]
 8002d52:	f04f 0200 	mov.w	r2, #0
 8002d56:	f04f 0300 	mov.w	r3, #0
 8002d5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d5e:	4629      	mov	r1, r5
 8002d60:	028b      	lsls	r3, r1, #10
 8002d62:	4621      	mov	r1, r4
 8002d64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d68:	4621      	mov	r1, r4
 8002d6a:	028a      	lsls	r2, r1, #10
 8002d6c:	4610      	mov	r0, r2
 8002d6e:	4619      	mov	r1, r3
 8002d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d72:	2200      	movs	r2, #0
 8002d74:	60bb      	str	r3, [r7, #8]
 8002d76:	60fa      	str	r2, [r7, #12]
 8002d78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d7c:	f7fd fa44 	bl	8000208 <__aeabi_uldivmod>
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	4613      	mov	r3, r2
 8002d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002d88:	4b0b      	ldr	r3, [pc, #44]	@ (8002db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	0c1b      	lsrs	r3, r3, #16
 8002d8e:	f003 0303 	and.w	r3, r3, #3
 8002d92:	3301      	adds	r3, #1
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002d98:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002da2:	e002      	b.n	8002daa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002da4:	4b05      	ldr	r3, [pc, #20]	@ (8002dbc <HAL_RCC_GetSysClockFreq+0x184>)
 8002da6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002da8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3740      	adds	r7, #64	@ 0x40
 8002db0:	46bd      	mov	sp, r7
 8002db2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002db6:	bf00      	nop
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	00f42400 	.word	0x00f42400
 8002dc0:	017d7840 	.word	0x017d7840

08002dc4 <memset>:
 8002dc4:	4402      	add	r2, r0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d100      	bne.n	8002dce <memset+0xa>
 8002dcc:	4770      	bx	lr
 8002dce:	f803 1b01 	strb.w	r1, [r3], #1
 8002dd2:	e7f9      	b.n	8002dc8 <memset+0x4>

08002dd4 <__libc_init_array>:
 8002dd4:	b570      	push	{r4, r5, r6, lr}
 8002dd6:	4d0d      	ldr	r5, [pc, #52]	@ (8002e0c <__libc_init_array+0x38>)
 8002dd8:	4c0d      	ldr	r4, [pc, #52]	@ (8002e10 <__libc_init_array+0x3c>)
 8002dda:	1b64      	subs	r4, r4, r5
 8002ddc:	10a4      	asrs	r4, r4, #2
 8002dde:	2600      	movs	r6, #0
 8002de0:	42a6      	cmp	r6, r4
 8002de2:	d109      	bne.n	8002df8 <__libc_init_array+0x24>
 8002de4:	4d0b      	ldr	r5, [pc, #44]	@ (8002e14 <__libc_init_array+0x40>)
 8002de6:	4c0c      	ldr	r4, [pc, #48]	@ (8002e18 <__libc_init_array+0x44>)
 8002de8:	f000 f818 	bl	8002e1c <_init>
 8002dec:	1b64      	subs	r4, r4, r5
 8002dee:	10a4      	asrs	r4, r4, #2
 8002df0:	2600      	movs	r6, #0
 8002df2:	42a6      	cmp	r6, r4
 8002df4:	d105      	bne.n	8002e02 <__libc_init_array+0x2e>
 8002df6:	bd70      	pop	{r4, r5, r6, pc}
 8002df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dfc:	4798      	blx	r3
 8002dfe:	3601      	adds	r6, #1
 8002e00:	e7ee      	b.n	8002de0 <__libc_init_array+0xc>
 8002e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e06:	4798      	blx	r3
 8002e08:	3601      	adds	r6, #1
 8002e0a:	e7f2      	b.n	8002df2 <__libc_init_array+0x1e>
 8002e0c:	08002e60 	.word	0x08002e60
 8002e10:	08002e60 	.word	0x08002e60
 8002e14:	08002e60 	.word	0x08002e60
 8002e18:	08002e64 	.word	0x08002e64

08002e1c <_init>:
 8002e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e1e:	bf00      	nop
 8002e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e22:	bc08      	pop	{r3}
 8002e24:	469e      	mov	lr, r3
 8002e26:	4770      	bx	lr

08002e28 <_fini>:
 8002e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e2a:	bf00      	nop
 8002e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e2e:	bc08      	pop	{r3}
 8002e30:	469e      	mov	lr, r3
 8002e32:	4770      	bx	lr
